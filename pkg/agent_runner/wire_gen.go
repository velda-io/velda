// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package agent_runner

import (
	"context"
	"github.com/spf13/cobra"
	agent2 "velda.io/velda/pkg/agent"
	"velda.io/velda/pkg/proto/agent"
)

// Injectors from wire.go:

func NewShimRunner(ctx context.Context, cmd *cobra.Command, sandboxConfig *agent.SandboxConfig) ShimRunner {
	sessionRequestPlugin := agent2.ProvideRequestPlugin()
	workDir := agent2.ProvideWorkdir(cmd)
	agentDaemonPlugin := agent2.ProvideAgentDaemonPlugin(workDir, sandboxConfig)
	sandboxFsPlugin := agent2.ProvideSandboxFsPlugin(workDir, sandboxConfig, sessionRequestPlugin)
	mounter := agent2.ProvideMounter(sandboxConfig)
	rootfsPlugin := agent2.ProvideRootfsPlugin(workDir, mounter, sandboxConfig, sessionRequestPlugin)
	autoFsDaemonPlugin := agent2.ProvideAutoFsDaemonPlugin()
	linuxNamespacePlugin := agent2.ProvideLinuxNamespacePlugin(workDir, sandboxConfig, sessionRequestPlugin)
	nvidiaPlugin := agent2.ProvideNvidiaPlugin(workDir, sandboxConfig)
	runPid1Plugin := agent2.ProvideRunPid1Plugin(workDir, sandboxConfig, agentDaemonPlugin, sessionRequestPlugin)
	shimRunner := provideShimRunner(sessionRequestPlugin, agentDaemonPlugin, sandboxFsPlugin, rootfsPlugin, autoFsDaemonPlugin, linuxNamespacePlugin, nvidiaPlugin, runPid1Plugin)
	return shimRunner
}

// NewPid1Runner creates a new Pid1Runner using dependency injection.
func NewPid1Runner(ctx context.Context, cmd *cobra.Command, sandboxConfig *agent.SandboxConfig) Pid1Runner {
	sessionRequestPlugin := agent2.ProvideRequestPlugin()
	authPluginType := agent2.ProvideAuthPlugin(cmd, sessionRequestPlugin)
	workDir := agent2.ProvideWorkdir(cmd)
	pivotRootPlugin := agent2.ProvidePivotRootPlugin(workDir)
	waiterPlugin := agent2.ProvideWaiterPlugin()
	completionSignalPlugin := agent2.ProvideCompletionSignalPlugin()
	agentName := agent2.ProvideAgentName(cmd)
	nvidiaPlugin := agent2.ProvideNvidiaPlugin(workDir, sandboxConfig)
	commandModifier := agent2.ProvideCommandModifier(nvidiaPlugin)
	sshdPlugin := agent2.ProvideSshdPlugin(agentName, authPluginType, waiterPlugin, sessionRequestPlugin, completionSignalPlugin, commandModifier)
	reportStatusPlugin := agent2.ProvideReportStatusPlugin(sshdPlugin)
	batchPlugin := agent2.ProvideBatchPlugin(waiterPlugin, sessionRequestPlugin, completionSignalPlugin, commandModifier)
	maxSessionTime := agent2.ProvideMaxSessionTime(cmd)
	completionWaitPlugin := agent2.ProvideCompletionWaiterPlugin(completionSignalPlugin, maxSessionTime)
	pid1Runner := providePid1Runner(sessionRequestPlugin, authPluginType, pivotRootPlugin, waiterPlugin, completionSignalPlugin, sshdPlugin, reportStatusPlugin, batchPlugin, completionWaitPlugin)
	return pid1Runner
}

// wire.go:

type ShimRunner agent2.AbstractPlugin

type Pid1Runner agent2.AbstractPlugin

func provideShimRunner(requestPlugin *agent2.SessionRequestPlugin, agentDaemonPlugin *agent2.AgentDaemonPlugin, sandboxFsPlugin *agent2.SandboxFsPlugin, rootfsPlugin *agent2.RootfsPlugin, autofsDaemon *agent2.AutoFsDaemonPlugin, sandboxPlugin *agent2.LinuxNamespacePlugin, nvidiaPlugin *agent2.NvidiaPlugin, pid1Plugin *agent2.RunPid1Plugin) ShimRunner {
	return agent2.NewPluginRunner(
		requestPlugin,
		agentDaemonPlugin,
		sandboxFsPlugin,
		rootfsPlugin,
		autofsDaemon,
		sandboxPlugin,
		nvidiaPlugin,
		autofsDaemon.GetMountPlugin(),
		pid1Plugin,
	)
}

func providePid1Runner(requestPlugin *agent2.SessionRequestPlugin, authPlugin agent2.AuthPluginType, pivotRootPlugin *agent2.PivotRootPlugin, waiterPlugin *agent2.WaiterPlugin, completionSignalPlugin *agent2.CompletionSignalPlugin, sshdPlugin *agent2.SshdPlugin, statusPlugin *agent2.ReportStatusPlugin, batchPlugin *agent2.BatchPlugin, completionWaiter *agent2.CompletionWaitPlugin) Pid1Runner {
	return agent2.NewPluginRunner(
		requestPlugin,
		pivotRootPlugin,
		authPlugin,
		waiterPlugin,
		completionSignalPlugin,
		sshdPlugin,
		batchPlugin,
		statusPlugin,
		completionWaiter,
	)
}
