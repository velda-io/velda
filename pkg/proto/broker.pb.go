// Copyright 2025 Velda Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v3.21.12
// source: broker.proto

package proto

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SessionExecutionFinalState int32

const (
	SessionExecutionFinalState_SESSION_EXECUTION_FINAL_STATE_UNSPECIFIED        SessionExecutionFinalState = 0
	SessionExecutionFinalState_SESSION_EXECUTION_FINAL_STATE_COMPLETE           SessionExecutionFinalState = 1
	SessionExecutionFinalState_SESSION_EXECUTION_FINAL_STATE_FAILURE            SessionExecutionFinalState = 2
	SessionExecutionFinalState_SESSION_EXECUTION_FINAL_STATE_CHECKPOINTED       SessionExecutionFinalState = 3
	SessionExecutionFinalState_SESSION_EXECUTION_FINAL_STATE_RESOURCE_EXHAUSTED SessionExecutionFinalState = 4
	SessionExecutionFinalState_SESSION_EXECUTION_FINAL_STATE_CANCELLED          SessionExecutionFinalState = 5
	SessionExecutionFinalState_SESSION_EXECUTION_FINAL_STATE_CANCELLED_BY_AGENT SessionExecutionFinalState = 6
	SessionExecutionFinalState_SESSION_EXECUTION_FINAL_STATE_WORKER_LOST        SessionExecutionFinalState = 7
	SessionExecutionFinalState_SESSION_EXECUTION_FINAL_STATE_STARTUP_FAILURE    SessionExecutionFinalState = 8
)

// Enum value maps for SessionExecutionFinalState.
var (
	SessionExecutionFinalState_name = map[int32]string{
		0: "SESSION_EXECUTION_FINAL_STATE_UNSPECIFIED",
		1: "SESSION_EXECUTION_FINAL_STATE_COMPLETE",
		2: "SESSION_EXECUTION_FINAL_STATE_FAILURE",
		3: "SESSION_EXECUTION_FINAL_STATE_CHECKPOINTED",
		4: "SESSION_EXECUTION_FINAL_STATE_RESOURCE_EXHAUSTED",
		5: "SESSION_EXECUTION_FINAL_STATE_CANCELLED",
		6: "SESSION_EXECUTION_FINAL_STATE_CANCELLED_BY_AGENT",
		7: "SESSION_EXECUTION_FINAL_STATE_WORKER_LOST",
		8: "SESSION_EXECUTION_FINAL_STATE_STARTUP_FAILURE",
	}
	SessionExecutionFinalState_value = map[string]int32{
		"SESSION_EXECUTION_FINAL_STATE_UNSPECIFIED":        0,
		"SESSION_EXECUTION_FINAL_STATE_COMPLETE":           1,
		"SESSION_EXECUTION_FINAL_STATE_FAILURE":            2,
		"SESSION_EXECUTION_FINAL_STATE_CHECKPOINTED":       3,
		"SESSION_EXECUTION_FINAL_STATE_RESOURCE_EXHAUSTED": 4,
		"SESSION_EXECUTION_FINAL_STATE_CANCELLED":          5,
		"SESSION_EXECUTION_FINAL_STATE_CANCELLED_BY_AGENT": 6,
		"SESSION_EXECUTION_FINAL_STATE_WORKER_LOST":        7,
		"SESSION_EXECUTION_FINAL_STATE_STARTUP_FAILURE":    8,
	}
)

func (x SessionExecutionFinalState) Enum() *SessionExecutionFinalState {
	p := new(SessionExecutionFinalState)
	*p = x
	return p
}

func (x SessionExecutionFinalState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionExecutionFinalState) Descriptor() protoreflect.EnumDescriptor {
	return file_broker_proto_enumTypes[0].Descriptor()
}

func (SessionExecutionFinalState) Type() protoreflect.EnumType {
	return &file_broker_proto_enumTypes[0]
}

func (x SessionExecutionFinalState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionExecutionFinalState.Descriptor instead.
func (SessionExecutionFinalState) EnumDescriptor() ([]byte, []int) {
	return file_broker_proto_rawDescGZIP(), []int{0}
}

type Dependency_DependencyType int32

const (
	Dependency_DEPENDENCY_TYPE_UNSPECIFIED Dependency_DependencyType = 0
	Dependency_DEPENDENCY_TYPE_SUCCESS     Dependency_DependencyType = 1
	Dependency_DEPENDENCY_TYPE_FAILURE     Dependency_DependencyType = 2
)

// Enum value maps for Dependency_DependencyType.
var (
	Dependency_DependencyType_name = map[int32]string{
		0: "DEPENDENCY_TYPE_UNSPECIFIED",
		1: "DEPENDENCY_TYPE_SUCCESS",
		2: "DEPENDENCY_TYPE_FAILURE",
	}
	Dependency_DependencyType_value = map[string]int32{
		"DEPENDENCY_TYPE_UNSPECIFIED": 0,
		"DEPENDENCY_TYPE_SUCCESS":     1,
		"DEPENDENCY_TYPE_FAILURE":     2,
	}
)

func (x Dependency_DependencyType) Enum() *Dependency_DependencyType {
	p := new(Dependency_DependencyType)
	*p = x
	return p
}

func (x Dependency_DependencyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dependency_DependencyType) Descriptor() protoreflect.EnumDescriptor {
	return file_broker_proto_enumTypes[1].Descriptor()
}

func (Dependency_DependencyType) Type() protoreflect.EnumType {
	return &file_broker_proto_enumTypes[1]
}

func (x Dependency_DependencyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dependency_DependencyType.Descriptor instead.
func (Dependency_DependencyType) EnumDescriptor() ([]byte, []int) {
	return file_broker_proto_rawDescGZIP(), []int{4, 0}
}

type SessionRequest_ConnectionFinishAction int32

const (
	SessionRequest_CONNECTION_FINISH_ACTION_UNSPECIFIED SessionRequest_ConnectionFinishAction = 0
	// The session will be terminated when the last connection is closed.
	SessionRequest_CONNECTION_FINISH_ACTION_TERMINATE SessionRequest_ConnectionFinishAction = 1
	// The session will be kept alive when the last connection is closed.
	SessionRequest_CONNECTION_FINISH_ACTION_KEEP_ALIVE SessionRequest_ConnectionFinishAction = 2
	// The session will be checkpointed when the last connection is closed.
	SessionRequest_CONNECTION_FINISH_ACTION_CHECKPOINT SessionRequest_ConnectionFinishAction = 3
)

// Enum value maps for SessionRequest_ConnectionFinishAction.
var (
	SessionRequest_ConnectionFinishAction_name = map[int32]string{
		0: "CONNECTION_FINISH_ACTION_UNSPECIFIED",
		1: "CONNECTION_FINISH_ACTION_TERMINATE",
		2: "CONNECTION_FINISH_ACTION_KEEP_ALIVE",
		3: "CONNECTION_FINISH_ACTION_CHECKPOINT",
	}
	SessionRequest_ConnectionFinishAction_value = map[string]int32{
		"CONNECTION_FINISH_ACTION_UNSPECIFIED": 0,
		"CONNECTION_FINISH_ACTION_TERMINATE":   1,
		"CONNECTION_FINISH_ACTION_KEEP_ALIVE":  2,
		"CONNECTION_FINISH_ACTION_CHECKPOINT":  3,
	}
)

func (x SessionRequest_ConnectionFinishAction) Enum() *SessionRequest_ConnectionFinishAction {
	p := new(SessionRequest_ConnectionFinishAction)
	*p = x
	return p
}

func (x SessionRequest_ConnectionFinishAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionRequest_ConnectionFinishAction) Descriptor() protoreflect.EnumDescriptor {
	return file_broker_proto_enumTypes[2].Descriptor()
}

func (SessionRequest_ConnectionFinishAction) Type() protoreflect.EnumType {
	return &file_broker_proto_enumTypes[2]
}

func (x SessionRequest_ConnectionFinishAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionRequest_ConnectionFinishAction.Descriptor instead.
func (SessionRequest_ConnectionFinishAction) EnumDescriptor() ([]byte, []int) {
	return file_broker_proto_rawDescGZIP(), []int{5, 0}
}

type ExecutionStatus_Status int32

const (
	ExecutionStatus_STATUS_UNSPECIFIED ExecutionStatus_Status = 0
	// Waiting to be assigned to an agent.
	ExecutionStatus_STATUS_QUEUEING ExecutionStatus_Status = 1
	// Has assigned to an agent, but not started yet.
	ExecutionStatus_STATUS_PENDING    ExecutionStatus_Status = 2
	ExecutionStatus_STATUS_RUNNING    ExecutionStatus_Status = 3
	ExecutionStatus_STATUS_TERMINATED ExecutionStatus_Status = 4
	// Lost heartbeat from the agent, but the agent may be still running.
	ExecutionStatus_STATUS_STALE        ExecutionStatus_Status = 5
	ExecutionStatus_STATUS_CHECKPOINTED ExecutionStatus_Status = 6
)

// Enum value maps for ExecutionStatus_Status.
var (
	ExecutionStatus_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_QUEUEING",
		2: "STATUS_PENDING",
		3: "STATUS_RUNNING",
		4: "STATUS_TERMINATED",
		5: "STATUS_STALE",
		6: "STATUS_CHECKPOINTED",
	}
	ExecutionStatus_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":  0,
		"STATUS_QUEUEING":     1,
		"STATUS_PENDING":      2,
		"STATUS_RUNNING":      3,
		"STATUS_TERMINATED":   4,
		"STATUS_STALE":        5,
		"STATUS_CHECKPOINTED": 6,
	}
)

func (x ExecutionStatus_Status) Enum() *ExecutionStatus_Status {
	p := new(ExecutionStatus_Status)
	*p = x
	return p
}

func (x ExecutionStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_broker_proto_enumTypes[3].Descriptor()
}

func (ExecutionStatus_Status) Type() protoreflect.EnumType {
	return &file_broker_proto_enumTypes[3]
}

func (x ExecutionStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionStatus_Status.Descriptor instead.
func (ExecutionStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_broker_proto_rawDescGZIP(), []int{10, 0}
}

type AgentIdentity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AgentId       string                 `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Hostname      string                 `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Pool          string                 `protobuf:"bytes,3,opt,name=pool,proto3" json:"pool,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentIdentity) Reset() {
	*x = AgentIdentity{}
	mi := &file_broker_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentIdentity) ProtoMessage() {}

func (x *AgentIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_broker_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentIdentity.ProtoReflect.Descriptor instead.
func (*AgentIdentity) Descriptor() ([]byte, []int) {
	return file_broker_proto_rawDescGZIP(), []int{0}
}

func (x *AgentIdentity) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *AgentIdentity) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *AgentIdentity) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

type AgentUpdateRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AgentIdentity       *AgentIdentity         `protobuf:"bytes,1,opt,name=agent_identity,json=agentIdentity,proto3" json:"agent_identity,omitempty"`
	SessionInitResponse *SessionInitResponse   `protobuf:"bytes,2,opt,name=session_init_response,json=sessionInitResponse,proto3" json:"session_init_response,omitempty"`
	SessionCompletion   *SessionCompletion     `protobuf:"bytes,3,opt,name=session_completion,json=sessionCompletion,proto3" json:"session_completion,omitempty"`
	// Only sent in the first message.
	CurrentExecutions []*CurrentExecution `protobuf:"bytes,4,rep,name=current_executions,json=currentExecutions,proto3" json:"current_executions,omitempty"`
	// The number of slots available for new & current sessions.
	// Default to 1.
	Slots         int32 `protobuf:"varint,5,opt,name=slots,proto3" json:"slots,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentUpdateRequest) Reset() {
	*x = AgentUpdateRequest{}
	mi := &file_broker_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentUpdateRequest) ProtoMessage() {}

func (x *AgentUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_broker_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentUpdateRequest.ProtoReflect.Descriptor instead.
func (*AgentUpdateRequest) Descriptor() ([]byte, []int) {
	return file_broker_proto_rawDescGZIP(), []int{1}
}

func (x *AgentUpdateRequest) GetAgentIdentity() *AgentIdentity {
	if x != nil {
		return x.AgentIdentity
	}
	return nil
}

func (x *AgentUpdateRequest) GetSessionInitResponse() *SessionInitResponse {
	if x != nil {
		return x.SessionInitResponse
	}
	return nil
}

func (x *AgentUpdateRequest) GetSessionCompletion() *SessionCompletion {
	if x != nil {
		return x.SessionCompletion
	}
	return nil
}

func (x *AgentUpdateRequest) GetCurrentExecutions() []*CurrentExecution {
	if x != nil {
		return x.CurrentExecutions
	}
	return nil
}

func (x *AgentUpdateRequest) GetSlots() int32 {
	if x != nil {
		return x.Slots
	}
	return 0
}

// Session execution record and final state enum for accounting
type SessionExecutionRecord struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	InstanceId    int64                      `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Pool          string                     `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	SessionId     string                     `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AgentId       string                     `protobuf:"bytes,4,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	CreateTime    *timestamppb.Timestamp     `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	StartTime     *timestamppb.Timestamp     `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *timestamppb.Timestamp     `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	ServiceName   string                     `protobuf:"bytes,8,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	BatchTaskId   string                     `protobuf:"bytes,9,opt,name=batch_task_id,json=batchTaskId,proto3" json:"batch_task_id,omitempty"`
	Description   string                     `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	FinalState    SessionExecutionFinalState `protobuf:"varint,11,opt,name=final_state,json=finalState,proto3,enum=velda.SessionExecutionFinalState" json:"final_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionExecutionRecord) Reset() {
	*x = SessionExecutionRecord{}
	mi := &file_broker_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionExecutionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionExecutionRecord) ProtoMessage() {}

func (x *SessionExecutionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_broker_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionExecutionRecord.ProtoReflect.Descriptor instead.
func (*SessionExecutionRecord) Descriptor() ([]byte, []int) {
	return file_broker_proto_rawDescGZIP(), []int{2}
}

func (x *SessionExecutionRecord) GetInstanceId() int64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *SessionExecutionRecord) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *SessionExecutionRecord) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SessionExecutionRecord) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *SessionExecutionRecord) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *SessionExecutionRecord) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *SessionExecutionRecord) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *SessionExecutionRecord) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *SessionExecutionRecord) GetBatchTaskId() string {
	if x != nil {
		return x.BatchTaskId
	}
	return ""
}

func (x *SessionExecutionRecord) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SessionExecutionRecord) GetFinalState() SessionExecutionFinalState {
	if x != nil {
		return x.FinalState
	}
	return SessionExecutionFinalState_SESSION_EXECUTION_FINAL_STATE_UNSPECIFIED
}

type CurrentExecution struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Request       *SessionRequest        `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Response      *SessionInitResponse   `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CurrentExecution) Reset() {
	*x = CurrentExecution{}
	mi := &file_broker_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrentExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentExecution) ProtoMessage() {}

func (x *CurrentExecution) ProtoReflect() protoreflect.Message {
	mi := &file_broker_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentExecution.ProtoReflect.Descriptor instead.
func (*CurrentExecution) Descriptor() ([]byte, []int) {
	return file_broker_proto_rawDescGZIP(), []int{3}
}

func (x *CurrentExecution) GetRequest() *SessionRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *CurrentExecution) GetResponse() *SessionInitResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type Dependency struct {
	state          protoimpl.MessageState    `protogen:"open.v1"`
	UpstreamTaskId string                    `protobuf:"bytes,1,opt,name=upstream_task_id,json=upstreamTaskId,proto3" json:"upstream_task_id,omitempty"`
	Type           Dependency_DependencyType `protobuf:"varint,2,opt,name=type,proto3,enum=velda.Dependency_DependencyType" json:"type,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Dependency) Reset() {
	*x = Dependency{}
	mi := &file_broker_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dependency) ProtoMessage() {}

func (x *Dependency) ProtoReflect() protoreflect.Message {
	mi := &file_broker_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dependency.ProtoReflect.Descriptor instead.
func (*Dependency) Descriptor() ([]byte, []int) {
	return file_broker_proto_rawDescGZIP(), []int{4}
}

func (x *Dependency) GetUpstreamTaskId() string {
	if x != nil {
		return x.UpstreamTaskId
	}
	return ""
}

func (x *Dependency) GetType() Dependency_DependencyType {
	if x != nil {
		return x.Type
	}
	return Dependency_DEPENDENCY_TYPE_UNSPECIFIED
}

type SessionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Only set by the server.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// For batch task only: Task ID to identify the task, can be later used to
	// query status.
	TaskId string `protobuf:"bytes,11,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// For online task: Service name to identify the session. Can be used to
	// connect.
	ServiceName string `protobuf:"bytes,12,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// usre@instance_id
	InstanceId int64  `protobuf:"varint,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	User       string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Pool       string `protobuf:"bytes,4,opt,name=pool,proto3" json:"pool,omitempty"`
	// Time to wait before the first connection. Default to 60 seconds.
	InitTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=init_timeout,json=initTimeout,proto3" json:"init_timeout,omitempty"`
	// The idle timeout for the session. The session will be terminated if
	// there is no activity for the duration.
	// Default to 0.
	IdleTimeout *durationpb.Duration `protobuf:"bytes,6,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// The priority of the task.
	Priority int64 `protobuf:"varint,8,opt,name=priority,proto3" json:"priority,omitempty"`
	// The workload to execute. If not set, it will be an interactive session
	// and needs to be connected explicitly by the client.
	Workload *Workload `protobuf:"bytes,9,opt,name=workload,proto3" json:"workload,omitempty"`
	// Additional metadata for searching the task.
	Labels []string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty"`
	// When requesting with a service name only, a new session will always be
	// created.
	//
	// Used to create multiple sessions for the same service name.
	// If not set, it will reuse the existing session if available.
	// Note: This API may change, we may use dedicated manifest to configure
	// complicated services.
	ForceNewSession bool `protobuf:"varint,13,opt,name=force_new_session,json=forceNewSession,proto3" json:"force_new_session,omitempty"`
	// For batch workload: The dependencies of the task.
	Dependencies           []*Dependency                         `protobuf:"bytes,14,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	ConnectionFinishAction SessionRequest_ConnectionFinishAction `protobuf:"varint,15,opt,name=connection_finish_action,json=connectionFinishAction,proto3,enum=velda.SessionRequest_ConnectionFinishAction" json:"connection_finish_action,omitempty"`
	// If true, the session will be restoring from the last checkpoint.
	// This should not be set by the client.
	Checkpointed bool `protobuf:"varint,16,opt,name=checkpointed,proto3" json:"checkpointed,omitempty"`
	// Additional information for the agent to execute the session.
	AgentSessionInfo *AgentSessionInfo `protobuf:"bytes,17,opt,name=agent_session_info,json=agentSessionInfo,proto3" json:"agent_session_info,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SessionRequest) Reset() {
	*x = SessionRequest{}
	mi := &file_broker_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest) ProtoMessage() {}

func (x *SessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_broker_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionRequest.ProtoReflect.Descriptor instead.
func (*SessionRequest) Descriptor() ([]byte, []int) {
	return file_broker_proto_rawDescGZIP(), []int{5}
}

func (x *SessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SessionRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *SessionRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *SessionRequest) GetInstanceId() int64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *SessionRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SessionRequest) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *SessionRequest) GetInitTimeout() *durationpb.Duration {
	if x != nil {
		return x.InitTimeout
	}
	return nil
}

func (x *SessionRequest) GetIdleTimeout() *durationpb.Duration {
	if x != nil {
		return x.IdleTimeout
	}
	return nil
}

func (x *SessionRequest) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *SessionRequest) GetWorkload() *Workload {
	if x != nil {
		return x.Workload
	}
	return nil
}

func (x *SessionRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SessionRequest) GetForceNewSession() bool {
	if x != nil {
		return x.ForceNewSession
	}
	return false
}

func (x *SessionRequest) GetDependencies() []*Dependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *SessionRequest) GetConnectionFinishAction() SessionRequest_ConnectionFinishAction {
	if x != nil {
		return x.ConnectionFinishAction
	}
	return SessionRequest_CONNECTION_FINISH_ACTION_UNSPECIFIED
}

func (x *SessionRequest) GetCheckpointed() bool {
	if x != nil {
		return x.Checkpointed
	}
	return false
}

func (x *SessionRequest) GetAgentSessionInfo() *AgentSessionInfo {
	if x != nil {
		return x.AgentSessionInfo
	}
	return nil
}

type AgentSessionInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to FileMount:
	//
	//	*AgentSessionInfo_NfsMount_
	FileMount     isAgentSessionInfo_FileMount `protobuf_oneof:"file_mount"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentSessionInfo) Reset() {
	*x = AgentSessionInfo{}
	mi := &file_broker_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentSessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentSessionInfo) ProtoMessage() {}

func (x *AgentSessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_broker_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentSessionInfo.ProtoReflect.Descriptor instead.
func (*AgentSessionInfo) Descriptor() ([]byte, []int) {
	return file_broker_proto_rawDescGZIP(), []int{6}
}

func (x *AgentSessionInfo) GetFileMount() isAgentSessionInfo_FileMount {
	if x != nil {
		return x.FileMount
	}
	return nil
}

func (x *AgentSessionInfo) GetNfsMount() *AgentSessionInfo_NfsMount {
	if x != nil {
		if x, ok := x.FileMount.(*AgentSessionInfo_NfsMount_); ok {
			return x.NfsMount
		}
	}
	return nil
}

type isAgentSessionInfo_FileMount interface {
	isAgentSessionInfo_FileMount()
}

type AgentSessionInfo_NfsMount_ struct {
	NfsMount *AgentSessionInfo_NfsMount `protobuf:"bytes,1,opt,name=nfs_mount,json=nfsMount,proto3,oneof"`
}

func (*AgentSessionInfo_NfsMount_) isAgentSessionInfo_FileMount() {}

type SessionInitResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceId    int64                  `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Success       bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Port          int32                  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	HostKey       []byte                 `protobuf:"bytes,5,opt,name=host_key,json=hostKey,proto3" json:"host_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionInitResponse) Reset() {
	*x = SessionInitResponse{}
	mi := &file_broker_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInitResponse) ProtoMessage() {}

func (x *SessionInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_broker_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInitResponse.ProtoReflect.Descriptor instead.
func (*SessionInitResponse) Descriptor() ([]byte, []int) {
	return file_broker_proto_rawDescGZIP(), []int{7}
}

func (x *SessionInitResponse) GetInstanceId() int64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *SessionInitResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SessionInitResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SessionInitResponse) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SessionInitResponse) GetHostKey() []byte {
	if x != nil {
		return x.HostKey
	}
	return nil
}

type SessionCompletion struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	InstanceId      int64                  `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	SessionId       string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	BatchTaskResult *BatchTaskResult       `protobuf:"bytes,3,opt,name=batch_task_result,json=batchTaskResult,proto3" json:"batch_task_result,omitempty"`
	Checkpointed    bool                   `protobuf:"varint,4,opt,name=checkpointed,proto3" json:"checkpointed,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SessionCompletion) Reset() {
	*x = SessionCompletion{}
	mi := &file_broker_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionCompletion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionCompletion) ProtoMessage() {}

func (x *SessionCompletion) ProtoReflect() protoreflect.Message {
	mi := &file_broker_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionCompletion.ProtoReflect.Descriptor instead.
func (*SessionCompletion) Descriptor() ([]byte, []int) {
	return file_broker_proto_rawDescGZIP(), []int{8}
}

func (x *SessionCompletion) GetInstanceId() int64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *SessionCompletion) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SessionCompletion) GetBatchTaskResult() *BatchTaskResult {
	if x != nil {
		return x.BatchTaskResult
	}
	return nil
}

func (x *SessionCompletion) GetCheckpointed() bool {
	if x != nil {
		return x.Checkpointed
	}
	return false
}

type AgentUpdateResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SessionRequest *SessionRequest        `protobuf:"bytes,1,opt,name=session_request,json=sessionRequest,proto3" json:"session_request,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AgentUpdateResponse) Reset() {
	*x = AgentUpdateResponse{}
	mi := &file_broker_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentUpdateResponse) ProtoMessage() {}

func (x *AgentUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_broker_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentUpdateResponse.ProtoReflect.Descriptor instead.
func (*AgentUpdateResponse) Descriptor() ([]byte, []int) {
	return file_broker_proto_rawDescGZIP(), []int{9}
}

func (x *AgentUpdateResponse) GetSessionRequest() *SessionRequest {
	if x != nil {
		return x.SessionRequest
	}
	return nil
}

type ExecutionStatus struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	SessionId     string                         `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ExecutionId   string                         `protobuf:"bytes,2,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	Status        ExecutionStatus_Status         `protobuf:"varint,3,opt,name=status,proto3,enum=velda.ExecutionStatus_Status" json:"status,omitempty"`
	TaskId        string                         `protobuf:"bytes,4,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	SshConnection *ExecutionStatus_SshConnection `protobuf:"bytes,5,opt,name=ssh_connection,json=sshConnection,proto3" json:"ssh_connection,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutionStatus) Reset() {
	*x = ExecutionStatus{}
	mi := &file_broker_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatus) ProtoMessage() {}

func (x *ExecutionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_broker_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatus.ProtoReflect.Descriptor instead.
func (*ExecutionStatus) Descriptor() ([]byte, []int) {
	return file_broker_proto_rawDescGZIP(), []int{10}
}

func (x *ExecutionStatus) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ExecutionStatus) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *ExecutionStatus) GetStatus() ExecutionStatus_Status {
	if x != nil {
		return x.Status
	}
	return ExecutionStatus_STATUS_UNSPECIFIED
}

func (x *ExecutionStatus) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ExecutionStatus) GetSshConnection() *ExecutionStatus_SshConnection {
	if x != nil {
		return x.SshConnection
	}
	return nil
}

type ListSessionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceId    int64                  `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	ServiceName   string                 `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSessionsRequest) Reset() {
	*x = ListSessionsRequest{}
	mi := &file_broker_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionsRequest) ProtoMessage() {}

func (x *ListSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_broker_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionsRequest.ProtoReflect.Descriptor instead.
func (*ListSessionsRequest) Descriptor() ([]byte, []int) {
	return file_broker_proto_rawDescGZIP(), []int{11}
}

func (x *ListSessionsRequest) GetInstanceId() int64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *ListSessionsRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

type Session struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SessionId         string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	User              string                 `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Pool              string                 `protobuf:"bytes,3,opt,name=pool,proto3" json:"pool,omitempty"`
	InstanceId        int64                  `protobuf:"varint,4,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Status            ExecutionStatus_Status `protobuf:"varint,5,opt,name=status,proto3,enum=velda.ExecutionStatus_Status" json:"status,omitempty"`
	ServiceName       string                 `protobuf:"bytes,6,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Labels            []string               `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	InternalIpAddress string                 `protobuf:"bytes,8,opt,name=internal_ip_address,json=internalIpAddress,proto3" json:"internal_ip_address,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Session) Reset() {
	*x = Session{}
	mi := &file_broker_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_broker_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_broker_proto_rawDescGZIP(), []int{12}
}

func (x *Session) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Session) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Session) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *Session) GetInstanceId() int64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *Session) GetStatus() ExecutionStatus_Status {
	if x != nil {
		return x.Status
	}
	return ExecutionStatus_STATUS_UNSPECIFIED
}

func (x *Session) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Session) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Session) GetInternalIpAddress() string {
	if x != nil {
		return x.InternalIpAddress
	}
	return ""
}

type ListSessionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sessions      []*Session             `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSessionsResponse) Reset() {
	*x = ListSessionsResponse{}
	mi := &file_broker_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionsResponse) ProtoMessage() {}

func (x *ListSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_broker_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionsResponse.ProtoReflect.Descriptor instead.
func (*ListSessionsResponse) Descriptor() ([]byte, []int) {
	return file_broker_proto_rawDescGZIP(), []int{13}
}

func (x *ListSessionsResponse) GetSessions() []*Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type AttachSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceId    int64                  `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttachSessionRequest) Reset() {
	*x = AttachSessionRequest{}
	mi := &file_broker_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttachSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachSessionRequest) ProtoMessage() {}

func (x *AttachSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_broker_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachSessionRequest.ProtoReflect.Descriptor instead.
func (*AttachSessionRequest) Descriptor() ([]byte, []int) {
	return file_broker_proto_rawDescGZIP(), []int{14}
}

func (x *AttachSessionRequest) GetInstanceId() int64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *AttachSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type AgentSessionInfo_NfsMount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NfsServer     string                 `protobuf:"bytes,1,opt,name=nfs_server,json=nfsServer,proto3" json:"nfs_server,omitempty"`
	NfsPath       string                 `protobuf:"bytes,2,opt,name=nfs_path,json=nfsPath,proto3" json:"nfs_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentSessionInfo_NfsMount) Reset() {
	*x = AgentSessionInfo_NfsMount{}
	mi := &file_broker_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentSessionInfo_NfsMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentSessionInfo_NfsMount) ProtoMessage() {}

func (x *AgentSessionInfo_NfsMount) ProtoReflect() protoreflect.Message {
	mi := &file_broker_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentSessionInfo_NfsMount.ProtoReflect.Descriptor instead.
func (*AgentSessionInfo_NfsMount) Descriptor() ([]byte, []int) {
	return file_broker_proto_rawDescGZIP(), []int{6, 0}
}

func (x *AgentSessionInfo_NfsMount) GetNfsServer() string {
	if x != nil {
		return x.NfsServer
	}
	return ""
}

func (x *AgentSessionInfo_NfsMount) GetNfsPath() string {
	if x != nil {
		return x.NfsPath
	}
	return ""
}

type ExecutionStatus_SshConnection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Host name or IP address for the client to connect.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Default to 22 if not set.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// The host key of the agent. The client should verify the host key
	// before connecting to the agent.
	HostKey       []byte `protobuf:"bytes,3,opt,name=host_key,json=hostKey,proto3" json:"host_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutionStatus_SshConnection) Reset() {
	*x = ExecutionStatus_SshConnection{}
	mi := &file_broker_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionStatus_SshConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatus_SshConnection) ProtoMessage() {}

func (x *ExecutionStatus_SshConnection) ProtoReflect() protoreflect.Message {
	mi := &file_broker_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatus_SshConnection.ProtoReflect.Descriptor instead.
func (*ExecutionStatus_SshConnection) Descriptor() ([]byte, []int) {
	return file_broker_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ExecutionStatus_SshConnection) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ExecutionStatus_SshConnection) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ExecutionStatus_SshConnection) GetHostKey() []byte {
	if x != nil {
		return x.HostKey
	}
	return nil
}

var File_broker_proto protoreflect.FileDescriptor

var file_broker_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x76, 0x65, 0x6c, 0x64, 0x61, 0x1a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x0d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f,
	0x6c, 0x22, 0xc8, 0x02, 0x0a, 0x12, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x15, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x13, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46,
	0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x6c,
	0x64, 0x61, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0xe3, 0x03, 0x0a,
	0x16, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x7b, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x6c, 0x64,
	0x61, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xd9, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28,
	0x0a, 0x10, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6b,
	0x0a, 0x0e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x22, 0x8c, 0x07, 0x0a, 0x0e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x6f, 0x6c, 0x12, 0x3c, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x3c, 0x0a, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76,
	0x65, 0x6c, 0x64, 0x61, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x08, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0c, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x66, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x45,
	0x0a, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x6c,
	0x64, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xbc, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45,
	0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b,
	0x45, 0x45, 0x50, 0x5f, 0x41, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xa7, 0x01, 0x0a, 0x10, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3f, 0x0a, 0x09, 0x6e, 0x66, 0x73, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x66, 0x73, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x66, 0x73, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0x44, 0x0a, 0x08, 0x4e, 0x66, 0x73, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x66, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x66, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x66, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x66, 0x73, 0x50, 0x61, 0x74, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x68, 0x6f,
	0x73, 0x74, 0x4b, 0x65, 0x79, 0x22, 0xbb, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x11, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x64, 0x22, 0x55, 0x0a, 0x13, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf2, 0x03, 0x0a, 0x0f, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x73, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5e, 0x0a,
	0x0d, 0x53, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x4b, 0x65,
	0x79, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x9f, 0x01,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x54, 0x41, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x06, 0x22,
	0x59, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x07, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x42, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x6c,
	0x64, 0x61, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x56, 0x0a, 0x14, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2a, 0xcd, 0x03, 0x0a,
	0x1a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x29, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x41,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x34, 0x0a, 0x30, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x48, 0x41,
	0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e,
	0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x34, 0x0a, 0x30, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f,
	0x42, 0x59, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b,
	0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x07, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x55, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x08, 0x32, 0x9f, 0x02, 0x0a,
	0x0d, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48,
	0x0a, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e,
	0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x5e, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x76, 0x65, 0x6c,
	0x64, 0x61, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1a,
	0x5a, 0x18, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x65, 0x6c, 0x64, 0x61,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_broker_proto_rawDescOnce sync.Once
	file_broker_proto_rawDescData = file_broker_proto_rawDesc
)

func file_broker_proto_rawDescGZIP() []byte {
	file_broker_proto_rawDescOnce.Do(func() {
		file_broker_proto_rawDescData = protoimpl.X.CompressGZIP(file_broker_proto_rawDescData)
	})
	return file_broker_proto_rawDescData
}

var file_broker_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_broker_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_broker_proto_goTypes = []any{
	(SessionExecutionFinalState)(0),            // 0: velda.SessionExecutionFinalState
	(Dependency_DependencyType)(0),             // 1: velda.Dependency.DependencyType
	(SessionRequest_ConnectionFinishAction)(0), // 2: velda.SessionRequest.ConnectionFinishAction
	(ExecutionStatus_Status)(0),                // 3: velda.ExecutionStatus.Status
	(*AgentIdentity)(nil),                      // 4: velda.AgentIdentity
	(*AgentUpdateRequest)(nil),                 // 5: velda.AgentUpdateRequest
	(*SessionExecutionRecord)(nil),             // 6: velda.SessionExecutionRecord
	(*CurrentExecution)(nil),                   // 7: velda.CurrentExecution
	(*Dependency)(nil),                         // 8: velda.Dependency
	(*SessionRequest)(nil),                     // 9: velda.SessionRequest
	(*AgentSessionInfo)(nil),                   // 10: velda.AgentSessionInfo
	(*SessionInitResponse)(nil),                // 11: velda.SessionInitResponse
	(*SessionCompletion)(nil),                  // 12: velda.SessionCompletion
	(*AgentUpdateResponse)(nil),                // 13: velda.AgentUpdateResponse
	(*ExecutionStatus)(nil),                    // 14: velda.ExecutionStatus
	(*ListSessionsRequest)(nil),                // 15: velda.ListSessionsRequest
	(*Session)(nil),                            // 16: velda.Session
	(*ListSessionsResponse)(nil),               // 17: velda.ListSessionsResponse
	(*AttachSessionRequest)(nil),               // 18: velda.AttachSessionRequest
	(*AgentSessionInfo_NfsMount)(nil),          // 19: velda.AgentSessionInfo.NfsMount
	(*ExecutionStatus_SshConnection)(nil),      // 20: velda.ExecutionStatus.SshConnection
	(*timestamppb.Timestamp)(nil),              // 21: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                // 22: google.protobuf.Duration
	(*Workload)(nil),                           // 23: velda.Workload
	(*BatchTaskResult)(nil),                    // 24: velda.BatchTaskResult
}
var file_broker_proto_depIdxs = []int32{
	4,  // 0: velda.AgentUpdateRequest.agent_identity:type_name -> velda.AgentIdentity
	11, // 1: velda.AgentUpdateRequest.session_init_response:type_name -> velda.SessionInitResponse
	12, // 2: velda.AgentUpdateRequest.session_completion:type_name -> velda.SessionCompletion
	7,  // 3: velda.AgentUpdateRequest.current_executions:type_name -> velda.CurrentExecution
	21, // 4: velda.SessionExecutionRecord.create_time:type_name -> google.protobuf.Timestamp
	21, // 5: velda.SessionExecutionRecord.start_time:type_name -> google.protobuf.Timestamp
	21, // 6: velda.SessionExecutionRecord.end_time:type_name -> google.protobuf.Timestamp
	0,  // 7: velda.SessionExecutionRecord.final_state:type_name -> velda.SessionExecutionFinalState
	9,  // 8: velda.CurrentExecution.request:type_name -> velda.SessionRequest
	11, // 9: velda.CurrentExecution.response:type_name -> velda.SessionInitResponse
	1,  // 10: velda.Dependency.type:type_name -> velda.Dependency.DependencyType
	22, // 11: velda.SessionRequest.init_timeout:type_name -> google.protobuf.Duration
	22, // 12: velda.SessionRequest.idle_timeout:type_name -> google.protobuf.Duration
	23, // 13: velda.SessionRequest.workload:type_name -> velda.Workload
	8,  // 14: velda.SessionRequest.dependencies:type_name -> velda.Dependency
	2,  // 15: velda.SessionRequest.connection_finish_action:type_name -> velda.SessionRequest.ConnectionFinishAction
	10, // 16: velda.SessionRequest.agent_session_info:type_name -> velda.AgentSessionInfo
	19, // 17: velda.AgentSessionInfo.nfs_mount:type_name -> velda.AgentSessionInfo.NfsMount
	24, // 18: velda.SessionCompletion.batch_task_result:type_name -> velda.BatchTaskResult
	9,  // 19: velda.AgentUpdateResponse.session_request:type_name -> velda.SessionRequest
	3,  // 20: velda.ExecutionStatus.status:type_name -> velda.ExecutionStatus.Status
	20, // 21: velda.ExecutionStatus.ssh_connection:type_name -> velda.ExecutionStatus.SshConnection
	3,  // 22: velda.Session.status:type_name -> velda.ExecutionStatus.Status
	16, // 23: velda.ListSessionsResponse.sessions:type_name -> velda.Session
	5,  // 24: velda.BrokerService.AgentUpdate:input_type -> velda.AgentUpdateRequest
	9,  // 25: velda.BrokerService.RequestSession:input_type -> velda.SessionRequest
	15, // 26: velda.BrokerService.ListSessions:input_type -> velda.ListSessionsRequest
	13, // 27: velda.BrokerService.AgentUpdate:output_type -> velda.AgentUpdateResponse
	14, // 28: velda.BrokerService.RequestSession:output_type -> velda.ExecutionStatus
	17, // 29: velda.BrokerService.ListSessions:output_type -> velda.ListSessionsResponse
	27, // [27:30] is the sub-list for method output_type
	24, // [24:27] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_broker_proto_init() }
func file_broker_proto_init() {
	if File_broker_proto != nil {
		return
	}
	file_execution_proto_init()
	file_broker_proto_msgTypes[6].OneofWrappers = []any{
		(*AgentSessionInfo_NfsMount_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_broker_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_broker_proto_goTypes,
		DependencyIndexes: file_broker_proto_depIdxs,
		EnumInfos:         file_broker_proto_enumTypes,
		MessageInfos:      file_broker_proto_msgTypes,
	}.Build()
	File_broker_proto = out.File
	file_broker_proto_rawDesc = nil
	file_broker_proto_goTypes = nil
	file_broker_proto_depIdxs = nil
}
