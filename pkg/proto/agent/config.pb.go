// Copyright 2025 Velda Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v3.21.12
// source: agent/config.proto

package agent

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DaemonConfig_Network_NetworkMode int32

const (
	DaemonConfig_Network_NETWORK_MODE_UNSPECIFIED DaemonConfig_Network_NetworkMode = 0
	DaemonConfig_Network_NETWORK_MODE_HOST        DaemonConfig_Network_NetworkMode = 1
	DaemonConfig_Network_NETWORK_MODE_BRIDGE      DaemonConfig_Network_NetworkMode = 2 // Use a bridge network
)

// Enum value maps for DaemonConfig_Network_NetworkMode.
var (
	DaemonConfig_Network_NetworkMode_name = map[int32]string{
		0: "NETWORK_MODE_UNSPECIFIED",
		1: "NETWORK_MODE_HOST",
		2: "NETWORK_MODE_BRIDGE",
	}
	DaemonConfig_Network_NetworkMode_value = map[string]int32{
		"NETWORK_MODE_UNSPECIFIED": 0,
		"NETWORK_MODE_HOST":        1,
		"NETWORK_MODE_BRIDGE":      2,
	}
)

func (x DaemonConfig_Network_NetworkMode) Enum() *DaemonConfig_Network_NetworkMode {
	p := new(DaemonConfig_Network_NetworkMode)
	*p = x
	return p
}

func (x DaemonConfig_Network_NetworkMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DaemonConfig_Network_NetworkMode) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_config_proto_enumTypes[0].Descriptor()
}

func (DaemonConfig_Network_NetworkMode) Type() protoreflect.EnumType {
	return &file_agent_config_proto_enumTypes[0]
}

func (x DaemonConfig_Network_NetworkMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DaemonConfig_Network_NetworkMode.Descriptor instead.
func (DaemonConfig_Network_NetworkMode) EnumDescriptor() ([]byte, []int) {
	return file_agent_config_proto_rawDescGZIP(), []int{3, 0, 0}
}

type HostMount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        string                 `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`                         // The source path on the host.
	Target        string                 `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`                         // The target path in the container.
	ReadWrite     bool                   `protobuf:"varint,3,opt,name=read_write,json=readWrite,proto3" json:"read_write,omitempty"` // Whether the mount is read-write.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostMount) Reset() {
	*x = HostMount{}
	mi := &file_agent_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostMount) ProtoMessage() {}

func (x *HostMount) ProtoReflect() protoreflect.Message {
	mi := &file_agent_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostMount.ProtoReflect.Descriptor instead.
func (*HostMount) Descriptor() ([]byte, []int) {
	return file_agent_config_proto_rawDescGZIP(), []int{0}
}

func (x *HostMount) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *HostMount) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *HostMount) GetReadWrite() bool {
	if x != nil {
		return x.ReadWrite
	}
	return false
}

type AgentDiskSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Source:
	//
	//	*AgentDiskSource_MountedDiskSource_
	//	*AgentDiskSource_NfsMountSource_
	Source        isAgentDiskSource_Source `protobuf_oneof:"source"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentDiskSource) Reset() {
	*x = AgentDiskSource{}
	mi := &file_agent_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentDiskSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentDiskSource) ProtoMessage() {}

func (x *AgentDiskSource) ProtoReflect() protoreflect.Message {
	mi := &file_agent_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentDiskSource.ProtoReflect.Descriptor instead.
func (*AgentDiskSource) Descriptor() ([]byte, []int) {
	return file_agent_config_proto_rawDescGZIP(), []int{1}
}

func (x *AgentDiskSource) GetSource() isAgentDiskSource_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *AgentDiskSource) GetMountedDiskSource() *AgentDiskSource_MountedDiskSource {
	if x != nil {
		if x, ok := x.Source.(*AgentDiskSource_MountedDiskSource_); ok {
			return x.MountedDiskSource
		}
	}
	return nil
}

func (x *AgentDiskSource) GetNfsMountSource() *AgentDiskSource_NfsMountSource {
	if x != nil {
		if x, ok := x.Source.(*AgentDiskSource_NfsMountSource_); ok {
			return x.NfsMountSource
		}
	}
	return nil
}

type isAgentDiskSource_Source interface {
	isAgentDiskSource_Source()
}

type AgentDiskSource_MountedDiskSource_ struct {
	MountedDiskSource *AgentDiskSource_MountedDiskSource `protobuf:"bytes,1,opt,name=mounted_disk_source,json=mountedDiskSource,proto3,oneof"` // The disk source is pre-mounted on the host.
}

type AgentDiskSource_NfsMountSource_ struct {
	NfsMountSource *AgentDiskSource_NfsMountSource `protobuf:"bytes,2,opt,name=nfs_mount_source,json=nfsMountSource,proto3,oneof"` // The disk source is an NFS mount.
}

func (*AgentDiskSource_MountedDiskSource_) isAgentDiskSource_Source() {}

func (*AgentDiskSource_NfsMountSource_) isAgentDiskSource_Source() {}

type SandboxConfig struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	DiskSource *AgentDiskSource       `protobuf:"bytes,1,opt,name=disk_source,json=diskSource,proto3" json:"disk_source,omitempty"`
	// List of allowed host mount sources by the session.
	// The sessions are only allowed to mount from these sources.
	AllowedHostMountSources []string `protobuf:"bytes,2,rep,name=allowed_host_mount_sources,json=allowedHostMountSources,proto3" json:"allowed_host_mount_sources,omitempty"`
	// List of host mounts to be applied in the sandbox.
	HostMounts []*HostMount `protobuf:"bytes,3,rep,name=host_mounts,json=hostMounts,proto3" json:"host_mounts,omitempty"`
	// The maximum time the session can run before it is terminated.
	MaxTime               *durationpb.Duration `protobuf:"bytes,4,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	HostLocalMountBaseDir string               `protobuf:"bytes,5,opt,name=host_local_mount_base_dir,json=hostLocalMountBaseDir,proto3" json:"host_local_mount_base_dir,omitempty"`
	// Whether to allocate a TTY for the session.
	AllocateTty bool `protobuf:"varint,6,opt,name=allocate_tty,json=allocateTty,proto3" json:"allocate_tty,omitempty"`
	// The apparmor profile to run workload.
	ApparmorProfile string `protobuf:"bytes,7,opt,name=apparmor_profile,json=apparmorProfile,proto3" json:"apparmor_profile,omitempty"`
	// The directory where the NVIDIA driver is installed.
	// It must contain bin & lib for the user-space NVIDIA driver libraries.
	NvidiaDriverInstallDir string `protobuf:"bytes,8,opt,name=nvidia_driver_install_dir,json=nvidiaDriverInstallDir,proto3" json:"nvidia_driver_install_dir,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SandboxConfig) Reset() {
	*x = SandboxConfig{}
	mi := &file_agent_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SandboxConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxConfig) ProtoMessage() {}

func (x *SandboxConfig) ProtoReflect() protoreflect.Message {
	mi := &file_agent_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandboxConfig.ProtoReflect.Descriptor instead.
func (*SandboxConfig) Descriptor() ([]byte, []int) {
	return file_agent_config_proto_rawDescGZIP(), []int{2}
}

func (x *SandboxConfig) GetDiskSource() *AgentDiskSource {
	if x != nil {
		return x.DiskSource
	}
	return nil
}

func (x *SandboxConfig) GetAllowedHostMountSources() []string {
	if x != nil {
		return x.AllowedHostMountSources
	}
	return nil
}

func (x *SandboxConfig) GetHostMounts() []*HostMount {
	if x != nil {
		return x.HostMounts
	}
	return nil
}

func (x *SandboxConfig) GetMaxTime() *durationpb.Duration {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *SandboxConfig) GetHostLocalMountBaseDir() string {
	if x != nil {
		return x.HostLocalMountBaseDir
	}
	return ""
}

func (x *SandboxConfig) GetAllocateTty() bool {
	if x != nil {
		return x.AllocateTty
	}
	return false
}

func (x *SandboxConfig) GetApparmorProfile() string {
	if x != nil {
		return x.ApparmorProfile
	}
	return ""
}

func (x *SandboxConfig) GetNvidiaDriverInstallDir() string {
	if x != nil {
		return x.NvidiaDriverInstallDir
	}
	return ""
}

type DaemonConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The path to the work directory for the agent daemon and all workspaces.
	WorkDirPath string `protobuf:"bytes,1,opt,name=work_dir_path,json=workDirPath,proto3" json:"work_dir_path,omitempty"`
	// The maximum number of sessions the agent can handle concurrently.
	// Default to 1.
	MaxSessions int32 `protobuf:"varint,2,opt,name=max_sessions,json=maxSessions,proto3" json:"max_sessions,omitempty"`
	// The network configuration for the agent.
	// If not set, all sessions will share the host network.
	// If set, each session will have its own network namespace.
	Network       *DaemonConfig_Network `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DaemonConfig) Reset() {
	*x = DaemonConfig{}
	mi := &file_agent_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DaemonConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaemonConfig) ProtoMessage() {}

func (x *DaemonConfig) ProtoReflect() protoreflect.Message {
	mi := &file_agent_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaemonConfig.ProtoReflect.Descriptor instead.
func (*DaemonConfig) Descriptor() ([]byte, []int) {
	return file_agent_config_proto_rawDescGZIP(), []int{3}
}

func (x *DaemonConfig) GetWorkDirPath() string {
	if x != nil {
		return x.WorkDirPath
	}
	return ""
}

func (x *DaemonConfig) GetMaxSessions() int32 {
	if x != nil {
		return x.MaxSessions
	}
	return 0
}

func (x *DaemonConfig) GetNetwork() *DaemonConfig_Network {
	if x != nil {
		return x.Network
	}
	return nil
}

type AgentConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Broker        *AgentConfig_Broker    `protobuf:"bytes,1,opt,name=broker,proto3" json:"broker,omitempty"`
	Session       string                 `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	Instance      int64                  `protobuf:"varint,3,opt,name=instance,proto3" json:"instance,omitempty"`
	SandboxConfig *SandboxConfig         `protobuf:"bytes,4,opt,name=sandbox_config,json=sandboxConfig,proto3" json:"sandbox_config,omitempty"`
	DaemonConfig  *DaemonConfig          `protobuf:"bytes,5,opt,name=daemon_config,json=daemonConfig,proto3" json:"daemon_config,omitempty"`
	Pool          string                 `protobuf:"bytes,6,opt,name=pool,proto3" json:"pool,omitempty"`
	TaskId        string                 `protobuf:"bytes,7,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentConfig) Reset() {
	*x = AgentConfig{}
	mi := &file_agent_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentConfig) ProtoMessage() {}

func (x *AgentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_agent_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentConfig.ProtoReflect.Descriptor instead.
func (*AgentConfig) Descriptor() ([]byte, []int) {
	return file_agent_config_proto_rawDescGZIP(), []int{4}
}

func (x *AgentConfig) GetBroker() *AgentConfig_Broker {
	if x != nil {
		return x.Broker
	}
	return nil
}

func (x *AgentConfig) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *AgentConfig) GetInstance() int64 {
	if x != nil {
		return x.Instance
	}
	return 0
}

func (x *AgentConfig) GetSandboxConfig() *SandboxConfig {
	if x != nil {
		return x.SandboxConfig
	}
	return nil
}

func (x *AgentConfig) GetDaemonConfig() *DaemonConfig {
	if x != nil {
		return x.DaemonConfig
	}
	return nil
}

func (x *AgentConfig) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *AgentConfig) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type AgentDiskSource_MountedDiskSource struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LocalPath     string                 `protobuf:"bytes,1,opt,name=local_path,json=localPath,proto3" json:"local_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentDiskSource_MountedDiskSource) Reset() {
	*x = AgentDiskSource_MountedDiskSource{}
	mi := &file_agent_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentDiskSource_MountedDiskSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentDiskSource_MountedDiskSource) ProtoMessage() {}

func (x *AgentDiskSource_MountedDiskSource) ProtoReflect() protoreflect.Message {
	mi := &file_agent_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentDiskSource_MountedDiskSource.ProtoReflect.Descriptor instead.
func (*AgentDiskSource_MountedDiskSource) Descriptor() ([]byte, []int) {
	return file_agent_config_proto_rawDescGZIP(), []int{1, 0}
}

func (x *AgentDiskSource_MountedDiskSource) GetLocalPath() string {
	if x != nil {
		return x.LocalPath
	}
	return ""
}

type AgentDiskSource_NfsMountSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Server & location will be provided by the broker.
	MountOptions  string `protobuf:"bytes,1,opt,name=mount_options,json=mountOptions,proto3" json:"mount_options,omitempty"` // Additional mount options.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentDiskSource_NfsMountSource) Reset() {
	*x = AgentDiskSource_NfsMountSource{}
	mi := &file_agent_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentDiskSource_NfsMountSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentDiskSource_NfsMountSource) ProtoMessage() {}

func (x *AgentDiskSource_NfsMountSource) ProtoReflect() protoreflect.Message {
	mi := &file_agent_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentDiskSource_NfsMountSource.ProtoReflect.Descriptor instead.
func (*AgentDiskSource_NfsMountSource) Descriptor() ([]byte, []int) {
	return file_agent_config_proto_rawDescGZIP(), []int{1, 1}
}

func (x *AgentDiskSource_NfsMountSource) GetMountOptions() string {
	if x != nil {
		return x.MountOptions
	}
	return ""
}

type DaemonConfig_Network struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Default is private_cidr_range at 172.80.0.0/24
	//
	// Types that are valid to be assigned to AgentIp:
	//
	//	*DaemonConfig_Network_PrivateCidrRange
	//	*DaemonConfig_Network_DetectGcpAliasIpRanges
	AgentIp     isDaemonConfig_Network_AgentIp   `protobuf_oneof:"agent_ip"`
	NetworkMode DaemonConfig_Network_NetworkMode `protobuf:"varint,3,opt,name=network_mode,json=networkMode,proto3,enum=velda.agent.DaemonConfig_Network_NetworkMode" json:"network_mode,omitempty"`
	// Block 169.254.169.254 from the session, which is used by GCP/AWS
	// metadata server.
	BlockMetadataServer bool `protobuf:"varint,4,opt,name=block_metadata_server,json=blockMetadataServer,proto3" json:"block_metadata_server,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DaemonConfig_Network) Reset() {
	*x = DaemonConfig_Network{}
	mi := &file_agent_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DaemonConfig_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaemonConfig_Network) ProtoMessage() {}

func (x *DaemonConfig_Network) ProtoReflect() protoreflect.Message {
	mi := &file_agent_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaemonConfig_Network.ProtoReflect.Descriptor instead.
func (*DaemonConfig_Network) Descriptor() ([]byte, []int) {
	return file_agent_config_proto_rawDescGZIP(), []int{3, 0}
}

func (x *DaemonConfig_Network) GetAgentIp() isDaemonConfig_Network_AgentIp {
	if x != nil {
		return x.AgentIp
	}
	return nil
}

func (x *DaemonConfig_Network) GetPrivateCidrRange() string {
	if x != nil {
		if x, ok := x.AgentIp.(*DaemonConfig_Network_PrivateCidrRange); ok {
			return x.PrivateCidrRange
		}
	}
	return ""
}

func (x *DaemonConfig_Network) GetDetectGcpAliasIpRanges() bool {
	if x != nil {
		if x, ok := x.AgentIp.(*DaemonConfig_Network_DetectGcpAliasIpRanges); ok {
			return x.DetectGcpAliasIpRanges
		}
	}
	return false
}

func (x *DaemonConfig_Network) GetNetworkMode() DaemonConfig_Network_NetworkMode {
	if x != nil {
		return x.NetworkMode
	}
	return DaemonConfig_Network_NETWORK_MODE_UNSPECIFIED
}

func (x *DaemonConfig_Network) GetBlockMetadataServer() bool {
	if x != nil {
		return x.BlockMetadataServer
	}
	return false
}

type isDaemonConfig_Network_AgentIp interface {
	isDaemonConfig_Network_AgentIp()
}

type DaemonConfig_Network_PrivateCidrRange struct {
	PrivateCidrRange string `protobuf:"bytes,1,opt,name=private_cidr_range,json=privateCidrRange,proto3,oneof"`
}

type DaemonConfig_Network_DetectGcpAliasIpRanges struct {
	DetectGcpAliasIpRanges bool `protobuf:"varint,2,opt,name=detect_gcp_alias_ip_ranges,json=detectGcpAliasIpRanges,proto3,oneof"`
}

func (*DaemonConfig_Network_PrivateCidrRange) isDaemonConfig_Network_AgentIp() {}

func (*DaemonConfig_Network_DetectGcpAliasIpRanges) isDaemonConfig_Network_AgentIp() {}

type AgentConfig_Broker struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The URL of the broker.
	Address       string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PublicAddress string `protobuf:"bytes,2,opt,name=public_address,json=publicAddress,proto3" json:"public_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentConfig_Broker) Reset() {
	*x = AgentConfig_Broker{}
	mi := &file_agent_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentConfig_Broker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentConfig_Broker) ProtoMessage() {}

func (x *AgentConfig_Broker) ProtoReflect() protoreflect.Message {
	mi := &file_agent_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentConfig_Broker.ProtoReflect.Descriptor instead.
func (*AgentConfig_Broker) Descriptor() ([]byte, []int) {
	return file_agent_config_proto_rawDescGZIP(), []int{4, 0}
}

func (x *AgentConfig_Broker) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AgentConfig_Broker) GetPublicAddress() string {
	if x != nil {
		return x.PublicAddress
	}
	return ""
}

var File_agent_config_proto protoreflect.FileDescriptor

var file_agent_config_proto_rawDesc = []byte{
	0x0a, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x5a, 0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x22, 0xc7, 0x02,
	0x0a, 0x0f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x60, 0x0a, 0x13, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x11, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x6e, 0x66, 0x73, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4e, 0x66, 0x73, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x66,
	0x73, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x38, 0x0a, 0x11,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x1a, 0x35, 0x0a, 0x0e, 0x4e, 0x66, 0x73, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x08, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xbd, 0x03, 0x0a, 0x0d, 0x53, 0x61, 0x6e, 0x64,
	0x62, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x69,
	0x73, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x6c,
	0x64, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x34,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x78,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x69,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x68, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x54, 0x74,
	0x79, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70,
	0x61, 0x72, 0x6d, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x19,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x44, 0x69, 0x72, 0x22, 0xfb, 0x03, 0x0a, 0x0c, 0x44, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x64, 0x69, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3b, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0xe6, 0x02, 0x0a,
	0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43,
	0x69, 0x64, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x5f, 0x67, 0x63, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x69, 0x70, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x16,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x47, 0x63, 0x70, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x70,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x76,
	0x65, 0x6c, 0x64, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x5b, 0x0a, 0x0b,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x10, 0x02, 0x42, 0x0a, 0x0a, 0x08, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x70, 0x22, 0xf7, 0x02, 0x0a, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76,
	0x65, 0x6c, 0x64, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f,
	0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x1a, 0x49, 0x0a, 0x06, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x20, 0x5a, 0x1e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x65, 0x6c, 0x64,
	0x61, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_agent_config_proto_rawDescOnce sync.Once
	file_agent_config_proto_rawDescData = file_agent_config_proto_rawDesc
)

func file_agent_config_proto_rawDescGZIP() []byte {
	file_agent_config_proto_rawDescOnce.Do(func() {
		file_agent_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_agent_config_proto_rawDescData)
	})
	return file_agent_config_proto_rawDescData
}

var file_agent_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_agent_config_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_agent_config_proto_goTypes = []any{
	(DaemonConfig_Network_NetworkMode)(0),     // 0: velda.agent.DaemonConfig.Network.NetworkMode
	(*HostMount)(nil),                         // 1: velda.agent.HostMount
	(*AgentDiskSource)(nil),                   // 2: velda.agent.AgentDiskSource
	(*SandboxConfig)(nil),                     // 3: velda.agent.SandboxConfig
	(*DaemonConfig)(nil),                      // 4: velda.agent.DaemonConfig
	(*AgentConfig)(nil),                       // 5: velda.agent.AgentConfig
	(*AgentDiskSource_MountedDiskSource)(nil), // 6: velda.agent.AgentDiskSource.MountedDiskSource
	(*AgentDiskSource_NfsMountSource)(nil),    // 7: velda.agent.AgentDiskSource.NfsMountSource
	(*DaemonConfig_Network)(nil),              // 8: velda.agent.DaemonConfig.Network
	(*AgentConfig_Broker)(nil),                // 9: velda.agent.AgentConfig.Broker
	(*durationpb.Duration)(nil),               // 10: google.protobuf.Duration
}
var file_agent_config_proto_depIdxs = []int32{
	6,  // 0: velda.agent.AgentDiskSource.mounted_disk_source:type_name -> velda.agent.AgentDiskSource.MountedDiskSource
	7,  // 1: velda.agent.AgentDiskSource.nfs_mount_source:type_name -> velda.agent.AgentDiskSource.NfsMountSource
	2,  // 2: velda.agent.SandboxConfig.disk_source:type_name -> velda.agent.AgentDiskSource
	1,  // 3: velda.agent.SandboxConfig.host_mounts:type_name -> velda.agent.HostMount
	10, // 4: velda.agent.SandboxConfig.max_time:type_name -> google.protobuf.Duration
	8,  // 5: velda.agent.DaemonConfig.network:type_name -> velda.agent.DaemonConfig.Network
	9,  // 6: velda.agent.AgentConfig.broker:type_name -> velda.agent.AgentConfig.Broker
	3,  // 7: velda.agent.AgentConfig.sandbox_config:type_name -> velda.agent.SandboxConfig
	4,  // 8: velda.agent.AgentConfig.daemon_config:type_name -> velda.agent.DaemonConfig
	0,  // 9: velda.agent.DaemonConfig.Network.network_mode:type_name -> velda.agent.DaemonConfig.Network.NetworkMode
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_agent_config_proto_init() }
func file_agent_config_proto_init() {
	if File_agent_config_proto != nil {
		return
	}
	file_agent_config_proto_msgTypes[1].OneofWrappers = []any{
		(*AgentDiskSource_MountedDiskSource_)(nil),
		(*AgentDiskSource_NfsMountSource_)(nil),
	}
	file_agent_config_proto_msgTypes[7].OneofWrappers = []any{
		(*DaemonConfig_Network_PrivateCidrRange)(nil),
		(*DaemonConfig_Network_DetectGcpAliasIpRanges)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_agent_config_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_agent_config_proto_goTypes,
		DependencyIndexes: file_agent_config_proto_depIdxs,
		EnumInfos:         file_agent_config_proto_enumTypes,
		MessageInfos:      file_agent_config_proto_msgTypes,
	}.Build()
	File_agent_config_proto = out.File
	file_agent_config_proto_rawDesc = nil
	file_agent_config_proto_goTypes = nil
	file_agent_config_proto_depIdxs = nil
}
