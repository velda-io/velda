// Copyright 2025 Velda Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v3.21.12
// source: config/config.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	agent "velda.io/velda/pkg/proto/agent"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AgentPool_AutoScaler_Mode int32

const (
	AgentPool_AutoScaler_MODE_UNSPECIFIED AgentPool_AutoScaler_Mode = 0
	// Standard mode: Request worker one-by-one.
	AgentPool_AutoScaler_MODE_STANDARD AgentPool_AutoScaler_Mode = 1
	// Batch mode: Request workers for all shards in a single request, and
	// nodes will be immediately shut-down after the job is completed.
	//
	// This is used to request nodes with special relationship requirement,
	// e.g.  affinity, or topology proximity requirements.
	// The actual implementation may vary depending on the underlying
	// backend.
	//
	// In batch mode, the pool name is pool:label
	AgentPool_AutoScaler_MODE_BATCH AgentPool_AutoScaler_Mode = 2
)

// Enum value maps for AgentPool_AutoScaler_Mode.
var (
	AgentPool_AutoScaler_Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "MODE_STANDARD",
		2: "MODE_BATCH",
	}
	AgentPool_AutoScaler_Mode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"MODE_STANDARD":    1,
		"MODE_BATCH":       2,
	}
)

func (x AgentPool_AutoScaler_Mode) Enum() *AgentPool_AutoScaler_Mode {
	p := new(AgentPool_AutoScaler_Mode)
	*p = x
	return p
}

func (x AgentPool_AutoScaler_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentPool_AutoScaler_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_config_config_proto_enumTypes[0].Descriptor()
}

func (AgentPool_AutoScaler_Mode) Type() protoreflect.EnumType {
	return &file_config_config_proto_enumTypes[0]
}

func (x AgentPool_AutoScaler_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentPool_AutoScaler_Mode.Descriptor instead.
func (AgentPool_AutoScaler_Mode) EnumDescriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{2, 0, 0}
}

type Server struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Local address for the server to listen on.
	GrpcAddress   string `protobuf:"bytes,1,opt,name=grpc_address,json=grpcAddress,proto3" json:"grpc_address,omitempty"`
	HttpAddress   string `protobuf:"bytes,2,opt,name=http_address,json=httpAddress,proto3" json:"http_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server) Reset() {
	*x = Server{}
	mi := &file_config_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *Server) GetGrpcAddress() string {
	if x != nil {
		return x.GrpcAddress
	}
	return ""
}

func (x *Server) GetHttpAddress() string {
	if x != nil {
		return x.HttpAddress
	}
	return ""
}

type Storage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Storage:
	//
	//	*Storage_Zfs_
	//	*Storage_Mini
	Storage       isStorage_Storage `protobuf_oneof:"storage"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Storage) Reset() {
	*x = Storage{}
	mi := &file_config_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Storage) ProtoMessage() {}

func (x *Storage) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Storage.ProtoReflect.Descriptor instead.
func (*Storage) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *Storage) GetStorage() isStorage_Storage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *Storage) GetZfs() *Storage_Zfs {
	if x != nil {
		if x, ok := x.Storage.(*Storage_Zfs_); ok {
			return x.Zfs
		}
	}
	return nil
}

func (x *Storage) GetMini() *Storage_MiniVelda {
	if x != nil {
		if x, ok := x.Storage.(*Storage_Mini); ok {
			return x.Mini
		}
	}
	return nil
}

type isStorage_Storage interface {
	isStorage_Storage()
}

type Storage_Zfs_ struct {
	Zfs *Storage_Zfs `protobuf:"bytes,1,opt,name=zfs,proto3,oneof"`
}

type Storage_Mini struct {
	Mini *Storage_MiniVelda `protobuf:"bytes,4,opt,name=mini,proto3,oneof"`
}

func (*Storage_Zfs_) isStorage_Storage() {}

func (*Storage_Mini) isStorage_Storage() {}

type AgentPool struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AutoScaler    *AgentPool_AutoScaler  `protobuf:"bytes,2,opt,name=auto_scaler,json=autoScaler,proto3" json:"auto_scaler,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentPool) Reset() {
	*x = AgentPool{}
	mi := &file_config_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentPool) ProtoMessage() {}

func (x *AgentPool) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentPool.ProtoReflect.Descriptor instead.
func (*AgentPool) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{2}
}

func (x *AgentPool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AgentPool) GetAutoScaler() *AgentPool_AutoScaler {
	if x != nil {
		return x.AutoScaler
	}
	return nil
}

type AutoscalerBackendGCEInstanceGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       string                 `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Zone          string                 `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	InstanceGroup string                 `protobuf:"bytes,3,opt,name=instance_group,json=instanceGroup,proto3" json:"instance_group,omitempty"`
	// The prefix of the instance name.
	// If not set, will use instance_group as the prefix.
	InstanceNamePrefix string `protobuf:"bytes,4,opt,name=instance_name_prefix,json=instanceNamePrefix,proto3" json:"instance_name_prefix,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AutoscalerBackendGCEInstanceGroup) Reset() {
	*x = AutoscalerBackendGCEInstanceGroup{}
	mi := &file_config_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoscalerBackendGCEInstanceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoscalerBackendGCEInstanceGroup) ProtoMessage() {}

func (x *AutoscalerBackendGCEInstanceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoscalerBackendGCEInstanceGroup.ProtoReflect.Descriptor instead.
func (*AutoscalerBackendGCEInstanceGroup) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{3}
}

func (x *AutoscalerBackendGCEInstanceGroup) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *AutoscalerBackendGCEInstanceGroup) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *AutoscalerBackendGCEInstanceGroup) GetInstanceGroup() string {
	if x != nil {
		return x.InstanceGroup
	}
	return ""
}

func (x *AutoscalerBackendGCEInstanceGroup) GetInstanceNamePrefix() string {
	if x != nil {
		return x.InstanceNamePrefix
	}
	return ""
}

type AutoscalerBackendAWSLaunchTemplate struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Region string                 `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// If not set, will create the template from scratch.
	LaunchTemplateName string `protobuf:"bytes,2,opt,name=launch_template_name,json=launchTemplateName,proto3" json:"launch_template_name,omitempty"`
	// The prefix of the instance name.
	// If not set, will use launch_template_name as the prefix.
	InstanceNamePrefix string `protobuf:"bytes,3,opt,name=instance_name_prefix,json=instanceNamePrefix,proto3" json:"instance_name_prefix,omitempty"`
	// If set, will use instance ID as the name.
	// Otherwise, it will use Name tag as the name.
	UseInstanceIdAsName bool `protobuf:"varint,4,opt,name=use_instance_id_as_name,json=useInstanceIdAsName,proto3" json:"use_instance_id_as_name,omitempty"`
	// Override some customizations for the launch template.
	InstanceType string `protobuf:"bytes,5,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// Inject setup script to the instance to configure the agent.
	AgentConfigContent string `protobuf:"bytes,6,opt,name=agent_config_content,json=agentConfigContent,proto3" json:"agent_config_content,omitempty"`
	// Pool will be automatically set.
	AgentConfig *agent.AgentConfig `protobuf:"bytes,12,opt,name=agent_config,json=agentConfig,proto3" json:"agent_config,omitempty"`
	// Restrict to a specific availability zone.
	Zone string `protobuf:"bytes,7,opt,name=zone,proto3" json:"zone,omitempty"`
	// The subnet ID to launch the instance in.
	SubnetId string `protobuf:"bytes,8,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// Additional tags to add to the instance.
	// If set, this will also be used to identify instances launched by the pool.
	Tags map[string]string `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// AMI ID
	AmiId string `protobuf:"bytes,10,opt,name=ami_id,json=amiId,proto3" json:"ami_id,omitempty"`
	// Security group ids to attach to the instance.
	// If not set, will use the default from launch template.
	SecurityGroupIds []string `protobuf:"bytes,11,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// How many instances to keep in stopped state for faster starting.
	MaxStoppedInstances int32 `protobuf:"varint,13,opt,name=max_stopped_instances,json=maxStoppedInstances,proto3" json:"max_stopped_instances,omitempty"`
	// The max duration to keep an instance stopped for reuse.
	MaxInstanceLifetime *durationpb.Duration `protobuf:"bytes,14,opt,name=max_instance_lifetime,json=maxInstanceLifetime,proto3" json:"max_instance_lifetime,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AutoscalerBackendAWSLaunchTemplate) Reset() {
	*x = AutoscalerBackendAWSLaunchTemplate{}
	mi := &file_config_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoscalerBackendAWSLaunchTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoscalerBackendAWSLaunchTemplate) ProtoMessage() {}

func (x *AutoscalerBackendAWSLaunchTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoscalerBackendAWSLaunchTemplate.ProtoReflect.Descriptor instead.
func (*AutoscalerBackendAWSLaunchTemplate) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{4}
}

func (x *AutoscalerBackendAWSLaunchTemplate) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AutoscalerBackendAWSLaunchTemplate) GetLaunchTemplateName() string {
	if x != nil {
		return x.LaunchTemplateName
	}
	return ""
}

func (x *AutoscalerBackendAWSLaunchTemplate) GetInstanceNamePrefix() string {
	if x != nil {
		return x.InstanceNamePrefix
	}
	return ""
}

func (x *AutoscalerBackendAWSLaunchTemplate) GetUseInstanceIdAsName() bool {
	if x != nil {
		return x.UseInstanceIdAsName
	}
	return false
}

func (x *AutoscalerBackendAWSLaunchTemplate) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *AutoscalerBackendAWSLaunchTemplate) GetAgentConfigContent() string {
	if x != nil {
		return x.AgentConfigContent
	}
	return ""
}

func (x *AutoscalerBackendAWSLaunchTemplate) GetAgentConfig() *agent.AgentConfig {
	if x != nil {
		return x.AgentConfig
	}
	return nil
}

func (x *AutoscalerBackendAWSLaunchTemplate) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *AutoscalerBackendAWSLaunchTemplate) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *AutoscalerBackendAWSLaunchTemplate) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AutoscalerBackendAWSLaunchTemplate) GetAmiId() string {
	if x != nil {
		return x.AmiId
	}
	return ""
}

func (x *AutoscalerBackendAWSLaunchTemplate) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *AutoscalerBackendAWSLaunchTemplate) GetMaxStoppedInstances() int32 {
	if x != nil {
		return x.MaxStoppedInstances
	}
	return 0
}

func (x *AutoscalerBackendAWSLaunchTemplate) GetMaxInstanceLifetime() *durationpb.Duration {
	if x != nil {
		return x.MaxInstanceLifetime
	}
	return nil
}

type AutoscalerBackendKubernetes struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Kubeconfig      string                 `protobuf:"bytes,1,opt,name=kubeconfig,proto3" json:"kubeconfig,omitempty"`
	Context         string                 `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	PodTemplatePath string                 `protobuf:"bytes,3,opt,name=pod_template_path,json=podTemplatePath,proto3" json:"pod_template_path,omitempty"`
	PodSelector     string                 `protobuf:"bytes,4,opt,name=pod_selector,json=podSelector,proto3" json:"pod_selector,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AutoscalerBackendKubernetes) Reset() {
	*x = AutoscalerBackendKubernetes{}
	mi := &file_config_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoscalerBackendKubernetes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoscalerBackendKubernetes) ProtoMessage() {}

func (x *AutoscalerBackendKubernetes) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoscalerBackendKubernetes.ProtoReflect.Descriptor instead.
func (*AutoscalerBackendKubernetes) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{5}
}

func (x *AutoscalerBackendKubernetes) GetKubeconfig() string {
	if x != nil {
		return x.Kubeconfig
	}
	return ""
}

func (x *AutoscalerBackendKubernetes) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *AutoscalerBackendKubernetes) GetPodTemplatePath() string {
	if x != nil {
		return x.PodTemplatePath
	}
	return ""
}

func (x *AutoscalerBackendKubernetes) GetPodSelector() string {
	if x != nil {
		return x.PodSelector
	}
	return ""
}

type AutoscalerBackendCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         string                 `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	Stop          string                 `protobuf:"bytes,2,opt,name=stop,proto3" json:"stop,omitempty"`
	List          string                 `protobuf:"bytes,3,opt,name=list,proto3" json:"list,omitempty"`
	BatchStart    string                 `protobuf:"bytes,4,opt,name=batch_start,json=batchStart,proto3" json:"batch_start,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AutoscalerBackendCommand) Reset() {
	*x = AutoscalerBackendCommand{}
	mi := &file_config_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoscalerBackendCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoscalerBackendCommand) ProtoMessage() {}

func (x *AutoscalerBackendCommand) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoscalerBackendCommand.ProtoReflect.Descriptor instead.
func (*AutoscalerBackendCommand) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{6}
}

func (x *AutoscalerBackendCommand) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *AutoscalerBackendCommand) GetStop() string {
	if x != nil {
		return x.Stop
	}
	return ""
}

func (x *AutoscalerBackendCommand) GetList() string {
	if x != nil {
		return x.List
	}
	return ""
}

func (x *AutoscalerBackendCommand) GetBatchStart() string {
	if x != nil {
		return x.BatchStart
	}
	return ""
}

type Provisioner struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Provisioner:
	//
	//	*Provisioner_Aws
	//	*Provisioner_Kubernetes
	//	*Provisioner_Gcs
	//	*Provisioner_AwsAuto
	Provisioner   isProvisioner_Provisioner `protobuf_oneof:"provisioner"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Provisioner) Reset() {
	*x = Provisioner{}
	mi := &file_config_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Provisioner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provisioner) ProtoMessage() {}

func (x *Provisioner) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provisioner.ProtoReflect.Descriptor instead.
func (*Provisioner) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{7}
}

func (x *Provisioner) GetProvisioner() isProvisioner_Provisioner {
	if x != nil {
		return x.Provisioner
	}
	return nil
}

func (x *Provisioner) GetAws() *AWSProvisioner {
	if x != nil {
		if x, ok := x.Provisioner.(*Provisioner_Aws); ok {
			return x.Aws
		}
	}
	return nil
}

func (x *Provisioner) GetKubernetes() *KubernetesProvisioner {
	if x != nil {
		if x, ok := x.Provisioner.(*Provisioner_Kubernetes); ok {
			return x.Kubernetes
		}
	}
	return nil
}

func (x *Provisioner) GetGcs() *GCSProvisioner {
	if x != nil {
		if x, ok := x.Provisioner.(*Provisioner_Gcs); ok {
			return x.Gcs
		}
	}
	return nil
}

func (x *Provisioner) GetAwsAuto() *AWSAutoProvisioner {
	if x != nil {
		if x, ok := x.Provisioner.(*Provisioner_AwsAuto); ok {
			return x.AwsAuto
		}
	}
	return nil
}

type isProvisioner_Provisioner interface {
	isProvisioner_Provisioner()
}

type Provisioner_Aws struct {
	// GCEProvisioner gce = 1;
	Aws *AWSProvisioner `protobuf:"bytes,2,opt,name=aws,proto3,oneof"`
}

type Provisioner_Kubernetes struct {
	Kubernetes *KubernetesProvisioner `protobuf:"bytes,3,opt,name=kubernetes,proto3,oneof"`
}

type Provisioner_Gcs struct {
	Gcs *GCSProvisioner `protobuf:"bytes,4,opt,name=gcs,proto3,oneof"`
}

type Provisioner_AwsAuto struct {
	AwsAuto *AWSAutoProvisioner `protobuf:"bytes,5,opt,name=aws_auto,json=awsAuto,proto3,oneof"`
}

func (*Provisioner_Aws) isProvisioner_Provisioner() {}

func (*Provisioner_Kubernetes) isProvisioner_Provisioner() {}

func (*Provisioner_Gcs) isProvisioner_Provisioner() {}

func (*Provisioner_AwsAuto) isProvisioner_Provisioner() {}

type KubernetesProvisioner struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Use in-cluster AgentPool custom resource definition or default cluster.
	// TODO: Should always use the namespace that apiserver runs.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// How to fetch the cluster credential.
	// If not set, will default to default config used in kubectl.
	//
	// Types that are valid to be assigned to Cluster:
	//
	//	*KubernetesProvisioner_Gke
	Cluster       isKubernetesProvisioner_Cluster `protobuf_oneof:"cluster"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubernetesProvisioner) Reset() {
	*x = KubernetesProvisioner{}
	mi := &file_config_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesProvisioner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesProvisioner) ProtoMessage() {}

func (x *KubernetesProvisioner) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesProvisioner.ProtoReflect.Descriptor instead.
func (*KubernetesProvisioner) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{8}
}

func (x *KubernetesProvisioner) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *KubernetesProvisioner) GetCluster() isKubernetesProvisioner_Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *KubernetesProvisioner) GetGke() *KubernetesProvisioner_GoogleKubernetesEngine {
	if x != nil {
		if x, ok := x.Cluster.(*KubernetesProvisioner_Gke); ok {
			return x.Gke
		}
	}
	return nil
}

type isKubernetesProvisioner_Cluster interface {
	isKubernetesProvisioner_Cluster()
}

type KubernetesProvisioner_Gke struct {
	Gke *KubernetesProvisioner_GoogleKubernetesEngine `protobuf:"bytes,2,opt,name=gke,proto3,oneof"`
}

func (*KubernetesProvisioner_Gke) isKubernetesProvisioner_Cluster() {}

// Use AWS SSM parameter to provision agent pools.
type AWSProvisioner struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Region         string                 `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	ConfigPrefix   string                 `protobuf:"bytes,2,opt,name=config_prefix,json=configPrefix,proto3" json:"config_prefix,omitempty"`
	UpdateInterval *durationpb.Duration   `protobuf:"bytes,3,opt,name=update_interval,json=updateInterval,proto3" json:"update_interval,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AWSProvisioner) Reset() {
	*x = AWSProvisioner{}
	mi := &file_config_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSProvisioner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSProvisioner) ProtoMessage() {}

func (x *AWSProvisioner) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSProvisioner.ProtoReflect.Descriptor instead.
func (*AWSProvisioner) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{9}
}

func (x *AWSProvisioner) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AWSProvisioner) GetConfigPrefix() string {
	if x != nil {
		return x.ConfigPrefix
	}
	return ""
}

func (x *AWSProvisioner) GetUpdateInterval() *durationpb.Duration {
	if x != nil {
		return x.UpdateInterval
	}
	return nil
}

// Generate pools based on all available instance types in a region/zone.
type AWSAutoProvisioner struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The template for the instance spec.
	Template *AutoscalerBackendAWSLaunchTemplate `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	// The prefix of pool names.
	PoolPrefix string `protobuf:"bytes,2,opt,name=pool_prefix,json=poolPrefix,proto3" json:"pool_prefix,omitempty"`
	// Autoscaler config.
	// backend will be automatically generated.
	AutoscalerConfig *AgentPool_AutoScaler `protobuf:"bytes,3,opt,name=autoscaler_config,json=autoscalerConfig,proto3" json:"autoscaler_config,omitempty"`
	// Allowed instance type prefixes.
	// If set, will only create pools for instance types that match
	// these prefixes.
	// If not set, will create pools for all available instance types.
	InstanceTypePrefixes []string `protobuf:"bytes,4,rep,name=instance_type_prefixes,json=instanceTypePrefixes,proto3" json:"instance_type_prefixes,omitempty"`
	// AMI Name to lookup.
	// If not set, will use the standard pattern by build version.
	AmiName string `protobuf:"bytes,5,opt,name=ami_name,json=amiName,proto3" json:"ami_name,omitempty"`
	// The AWS account ID of the owner of the AMI.
	// If not set, will default to Velda's cloud account.
	AmiOwner string `protobuf:"bytes,6,opt,name=ami_owner,json=amiOwner,proto3" json:"ami_owner,omitempty"`
	// If set, will skip the lookup and directly use the provided AMI.
	AmiId         string `protobuf:"bytes,7,opt,name=ami_id,json=amiId,proto3" json:"ami_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AWSAutoProvisioner) Reset() {
	*x = AWSAutoProvisioner{}
	mi := &file_config_config_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSAutoProvisioner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSAutoProvisioner) ProtoMessage() {}

func (x *AWSAutoProvisioner) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSAutoProvisioner.ProtoReflect.Descriptor instead.
func (*AWSAutoProvisioner) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{10}
}

func (x *AWSAutoProvisioner) GetTemplate() *AutoscalerBackendAWSLaunchTemplate {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *AWSAutoProvisioner) GetPoolPrefix() string {
	if x != nil {
		return x.PoolPrefix
	}
	return ""
}

func (x *AWSAutoProvisioner) GetAutoscalerConfig() *AgentPool_AutoScaler {
	if x != nil {
		return x.AutoscalerConfig
	}
	return nil
}

func (x *AWSAutoProvisioner) GetInstanceTypePrefixes() []string {
	if x != nil {
		return x.InstanceTypePrefixes
	}
	return nil
}

func (x *AWSAutoProvisioner) GetAmiName() string {
	if x != nil {
		return x.AmiName
	}
	return ""
}

func (x *AWSAutoProvisioner) GetAmiOwner() string {
	if x != nil {
		return x.AmiOwner
	}
	return ""
}

func (x *AWSAutoProvisioner) GetAmiId() string {
	if x != nil {
		return x.AmiId
	}
	return ""
}

type GCSProvisioner struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Bucket         string                 `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	ConfigPrefix   string                 `protobuf:"bytes,2,opt,name=config_prefix,json=configPrefix,proto3" json:"config_prefix,omitempty"`
	UpdateInterval *durationpb.Duration   `protobuf:"bytes,3,opt,name=update_interval,json=updateInterval,proto3" json:"update_interval,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GCSProvisioner) Reset() {
	*x = GCSProvisioner{}
	mi := &file_config_config_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GCSProvisioner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCSProvisioner) ProtoMessage() {}

func (x *GCSProvisioner) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCSProvisioner.ProtoReflect.Descriptor instead.
func (*GCSProvisioner) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{11}
}

func (x *GCSProvisioner) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *GCSProvisioner) GetConfigPrefix() string {
	if x != nil {
		return x.ConfigPrefix
	}
	return ""
}

func (x *GCSProvisioner) GetUpdateInterval() *durationpb.Duration {
	if x != nil {
		return x.UpdateInterval
	}
	return nil
}

type AutoscalerBackend struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Backend:
	//
	//	*AutoscalerBackend_GceInstanceGroup
	//	*AutoscalerBackend_AwsLaunchTemplate
	//	*AutoscalerBackend_Kubernetes
	//	*AutoscalerBackend_Command
	Backend       isAutoscalerBackend_Backend `protobuf_oneof:"backend"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AutoscalerBackend) Reset() {
	*x = AutoscalerBackend{}
	mi := &file_config_config_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoscalerBackend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoscalerBackend) ProtoMessage() {}

func (x *AutoscalerBackend) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoscalerBackend.ProtoReflect.Descriptor instead.
func (*AutoscalerBackend) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{12}
}

func (x *AutoscalerBackend) GetBackend() isAutoscalerBackend_Backend {
	if x != nil {
		return x.Backend
	}
	return nil
}

func (x *AutoscalerBackend) GetGceInstanceGroup() *AutoscalerBackendGCEInstanceGroup {
	if x != nil {
		if x, ok := x.Backend.(*AutoscalerBackend_GceInstanceGroup); ok {
			return x.GceInstanceGroup
		}
	}
	return nil
}

func (x *AutoscalerBackend) GetAwsLaunchTemplate() *AutoscalerBackendAWSLaunchTemplate {
	if x != nil {
		if x, ok := x.Backend.(*AutoscalerBackend_AwsLaunchTemplate); ok {
			return x.AwsLaunchTemplate
		}
	}
	return nil
}

func (x *AutoscalerBackend) GetKubernetes() *AutoscalerBackendKubernetes {
	if x != nil {
		if x, ok := x.Backend.(*AutoscalerBackend_Kubernetes); ok {
			return x.Kubernetes
		}
	}
	return nil
}

func (x *AutoscalerBackend) GetCommand() *AutoscalerBackendCommand {
	if x != nil {
		if x, ok := x.Backend.(*AutoscalerBackend_Command); ok {
			return x.Command
		}
	}
	return nil
}

type isAutoscalerBackend_Backend interface {
	isAutoscalerBackend_Backend()
}

type AutoscalerBackend_GceInstanceGroup struct {
	GceInstanceGroup *AutoscalerBackendGCEInstanceGroup `protobuf:"bytes,1,opt,name=gce_instance_group,json=gceInstanceGroup,proto3,oneof"`
}

type AutoscalerBackend_AwsLaunchTemplate struct {
	AwsLaunchTemplate *AutoscalerBackendAWSLaunchTemplate `protobuf:"bytes,4,opt,name=aws_launch_template,json=awsLaunchTemplate,proto3,oneof"`
}

type AutoscalerBackend_Kubernetes struct {
	Kubernetes *AutoscalerBackendKubernetes `protobuf:"bytes,2,opt,name=kubernetes,proto3,oneof"`
}

type AutoscalerBackend_Command struct {
	Command *AutoscalerBackendCommand `protobuf:"bytes,3,opt,name=command,proto3,oneof"`
}

func (*AutoscalerBackend_GceInstanceGroup) isAutoscalerBackend_Backend() {}

func (*AutoscalerBackend_AwsLaunchTemplate) isAutoscalerBackend_Backend() {}

func (*AutoscalerBackend_Kubernetes) isAutoscalerBackend_Backend() {}

func (*AutoscalerBackend_Command) isAutoscalerBackend_Backend() {}

type Config struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Server     *Server                `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Storage    *Storage               `protobuf:"bytes,4,opt,name=storage,proto3" json:"storage,omitempty"`
	AgentPools []*AgentPool           `protobuf:"bytes,5,rep,name=agent_pools,json=agentPools,proto3" json:"agent_pools,omitempty"`
	// Dyanmic create agent pools from external configs.
	Provisioners []*Provisioner `protobuf:"bytes,9,rep,name=provisioners,proto3" json:"provisioners,omitempty"`
	// Whether to allow pools to be dynamically created(e.g. through
	// custom method to create an agent).
	AllowNewPool bool `protobuf:"varint,6,opt,name=allow_new_pool,json=allowNewPool,proto3" json:"allow_new_pool,omitempty"`
	// The default broker info to use if not set in the agent config.
	DefaultBrokerInfo *agent.BrokerInfo `protobuf:"bytes,11,opt,name=default_broker_info,json=defaultBrokerInfo,proto3" json:"default_broker_info,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_config_config_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{13}
}

func (x *Config) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Config) GetStorage() *Storage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *Config) GetAgentPools() []*AgentPool {
	if x != nil {
		return x.AgentPools
	}
	return nil
}

func (x *Config) GetProvisioners() []*Provisioner {
	if x != nil {
		return x.Provisioners
	}
	return nil
}

func (x *Config) GetAllowNewPool() bool {
	if x != nil {
		return x.AllowNewPool
	}
	return false
}

func (x *Config) GetDefaultBrokerInfo() *agent.BrokerInfo {
	if x != nil {
		return x.DefaultBrokerInfo
	}
	return nil
}

type Storage_Zfs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pool          string                 `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Storage_Zfs) Reset() {
	*x = Storage_Zfs{}
	mi := &file_config_config_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Storage_Zfs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Storage_Zfs) ProtoMessage() {}

func (x *Storage_Zfs) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Storage_Zfs.ProtoReflect.Descriptor instead.
func (*Storage_Zfs) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Storage_Zfs) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

type Storage_MiniVelda struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Root          string                 `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Storage_MiniVelda) Reset() {
	*x = Storage_MiniVelda{}
	mi := &file_config_config_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Storage_MiniVelda) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Storage_MiniVelda) ProtoMessage() {}

func (x *Storage_MiniVelda) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Storage_MiniVelda.ProtoReflect.Descriptor instead.
func (*Storage_MiniVelda) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Storage_MiniVelda) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

type AgentPool_AutoScaler struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Backend       *AutoscalerBackend     `protobuf:"bytes,1,opt,name=backend,proto3" json:"backend,omitempty"`
	MaxAgents     int32                  `protobuf:"varint,2,opt,name=max_agents,json=maxAgents,proto3" json:"max_agents,omitempty"`
	MinIdleAgents int32                  `protobuf:"varint,3,opt,name=min_idle_agents,json=minIdleAgents,proto3" json:"min_idle_agents,omitempty"`
	MaxIdleAgents int32                  `protobuf:"varint,4,opt,name=max_idle_agents,json=maxIdleAgents,proto3" json:"max_idle_agents,omitempty"`
	// How long to wait before removing idle agents.
	// Default will be 0 seconds: it will immediately remove idle agents
	// until min_idle_agents is reached.
	IdleDecay *durationpb.Duration `protobuf:"bytes,5,opt,name=idle_decay,json=idleDecay,proto3" json:"idle_decay,omitempty"`
	// How long to wait before starting the size-maintenance loop.
	// It will always start after all workers are connected.
	// Default to infinite: will always wait for all workers to connect.
	InitialDelay *durationpb.Duration `protobuf:"bytes,6,opt,name=initial_delay,json=initialDelay,proto3" json:"initial_delay,omitempty"`
	// How often to scan the backend to check
	// for consistency of the agent connected VS the auto-scaler backend.
	// Default to 60 seconds.
	SyncLoopInterval *durationpb.Duration `protobuf:"bytes,7,opt,name=sync_loop_interval,json=syncLoopInterval,proto3" json:"sync_loop_interval,omitempty"`
	// If set, any worker that has not been connected to the agent
	// for this duration will be killed.
	// Only checked at every sync_loop_interval.
	KillUnknownAfter *durationpb.Duration `protobuf:"bytes,8,opt,name=kill_unknown_after,json=killUnknownAfter,proto3" json:"kill_unknown_after,omitempty"`
	// Number of sessions per agent
	// Default to 1
	// This is only used for auto-scaling purpose.
	// An agent may run less sessions than this.
	DefaultSlotsPerAgent int32                     `protobuf:"varint,9,opt,name=default_slots_per_agent,json=defaultSlotsPerAgent,proto3" json:"default_slots_per_agent,omitempty"`
	Mode                 AgentPool_AutoScaler_Mode `protobuf:"varint,10,opt,name=mode,proto3,enum=velda.config.AgentPool_AutoScaler_Mode" json:"mode,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *AgentPool_AutoScaler) Reset() {
	*x = AgentPool_AutoScaler{}
	mi := &file_config_config_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentPool_AutoScaler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentPool_AutoScaler) ProtoMessage() {}

func (x *AgentPool_AutoScaler) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentPool_AutoScaler.ProtoReflect.Descriptor instead.
func (*AgentPool_AutoScaler) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{2, 0}
}

func (x *AgentPool_AutoScaler) GetBackend() *AutoscalerBackend {
	if x != nil {
		return x.Backend
	}
	return nil
}

func (x *AgentPool_AutoScaler) GetMaxAgents() int32 {
	if x != nil {
		return x.MaxAgents
	}
	return 0
}

func (x *AgentPool_AutoScaler) GetMinIdleAgents() int32 {
	if x != nil {
		return x.MinIdleAgents
	}
	return 0
}

func (x *AgentPool_AutoScaler) GetMaxIdleAgents() int32 {
	if x != nil {
		return x.MaxIdleAgents
	}
	return 0
}

func (x *AgentPool_AutoScaler) GetIdleDecay() *durationpb.Duration {
	if x != nil {
		return x.IdleDecay
	}
	return nil
}

func (x *AgentPool_AutoScaler) GetInitialDelay() *durationpb.Duration {
	if x != nil {
		return x.InitialDelay
	}
	return nil
}

func (x *AgentPool_AutoScaler) GetSyncLoopInterval() *durationpb.Duration {
	if x != nil {
		return x.SyncLoopInterval
	}
	return nil
}

func (x *AgentPool_AutoScaler) GetKillUnknownAfter() *durationpb.Duration {
	if x != nil {
		return x.KillUnknownAfter
	}
	return nil
}

func (x *AgentPool_AutoScaler) GetDefaultSlotsPerAgent() int32 {
	if x != nil {
		return x.DefaultSlotsPerAgent
	}
	return 0
}

func (x *AgentPool_AutoScaler) GetMode() AgentPool_AutoScaler_Mode {
	if x != nil {
		return x.Mode
	}
	return AgentPool_AutoScaler_MODE_UNSPECIFIED
}

type KubernetesProvisioner_GoogleKubernetesEngine struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       string                 `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Location      string                 `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	ClusterName   string                 `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubernetesProvisioner_GoogleKubernetesEngine) Reset() {
	*x = KubernetesProvisioner_GoogleKubernetesEngine{}
	mi := &file_config_config_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesProvisioner_GoogleKubernetesEngine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesProvisioner_GoogleKubernetesEngine) ProtoMessage() {}

func (x *KubernetesProvisioner_GoogleKubernetesEngine) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesProvisioner_GoogleKubernetesEngine.ProtoReflect.Descriptor instead.
func (*KubernetesProvisioner_GoogleKubernetesEngine) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{8, 0}
}

func (x *KubernetesProvisioner_GoogleKubernetesEngine) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *KubernetesProvisioner_GoogleKubernetesEngine) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *KubernetesProvisioner_GoogleKubernetesEngine) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

var File_config_config_proto protoreflect.FileDescriptor

var file_config_config_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x60, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x70, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08,
	0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0xc2, 0x01, 0x0a, 0x07, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x7a, 0x66, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x5a, 0x66, 0x73, 0x48, 0x00, 0x52,
	0x03, 0x7a, 0x66, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x69, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x56, 0x65,
	0x6c, 0x64, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x69, 0x1a, 0x19, 0x0a, 0x03, 0x5a,
	0x66, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x1f, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x69, 0x56, 0x65,
	0x6c, 0x64, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xde,
	0x05, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x43, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x1a, 0xf7, 0x04, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x6c, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64,
	0x6c, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x38,
	0x0a, 0x0a, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69,
	0x64, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x47, 0x0a, 0x12, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x73, 0x79, 0x6e, 0x63, 0x4c, 0x6f, 0x6f, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x47, 0x0a, 0x12, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x50, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x12, 0x3b, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x3f,
	0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x22,
	0xaa, 0x01, 0x0a, 0x21, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x47, 0x43, 0x45, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0xec, 0x05, 0x0a,
	0x22, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x41, 0x57, 0x53, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x34, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x41,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0c,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x41, 0x57, 0x53, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x6d,
	0x69, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6d, 0x69, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x6d, 0x61, 0x78, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6d,
	0x61, 0x78, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa6, 0x01, 0x0a, 0x1b,
	0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6b,
	0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6f, 0x64, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x6f, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x64, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x22, 0x79, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x22,
	0x86, 0x02, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76,
	0x65, 0x6c, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x57, 0x53, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x03, 0x61, 0x77,
	0x73, 0x12, 0x45, 0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x03, 0x67, 0x63, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x03, 0x67, 0x63, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x61, 0x77,
	0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76,
	0x65, 0x6c, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x57, 0x53, 0x41,
	0x75, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x07, 0x61, 0x77, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x22, 0x83, 0x02, 0x0a, 0x15, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x4e, 0x0a, 0x03, 0x67, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x03, 0x67, 0x6b, 0x65,
	0x1a, 0x71, 0x0a, 0x16, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x91,
	0x01, 0x0a, 0x0e, 0x41, 0x57, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x42,
	0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x22, 0xd9, 0x02, 0x0a, 0x12, 0x41, 0x57, 0x53, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x08, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x76, 0x65,
	0x6c, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x41, 0x57, 0x53, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f,
	0x6f, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x4f, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x6d, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6d,
	0x69, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x6d, 0x69, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x6d, 0x69, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6d, 0x69, 0x49, 0x64, 0x22, 0x91,
	0x01, 0x0a, 0x0e, 0x47, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x42,
	0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x22, 0xf4, 0x02, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x72, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x5f, 0x0a, 0x12, 0x67, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x47, 0x43, 0x45, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x10, 0x67, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x62, 0x0a, 0x13, 0x61, 0x77, 0x73,
	0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x41, 0x57, 0x53, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x11, 0x61, 0x77, 0x73, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a,
	0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65,
	0x6c, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x22, 0xf3, 0x02, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x3d, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x65, 0x77, 0x50, 0x6f,
	0x6f, 0x6c, 0x12, 0x47, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08,
	0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04, 0x08, 0x32, 0x10, 0x64, 0x42,
	0x21, 0x5a, 0x1f, 0x76, 0x65, 0x6c, 0x64, 0x61, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x65, 0x6c, 0x64,
	0x61, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_config_proto_rawDescOnce sync.Once
	file_config_config_proto_rawDescData = file_config_config_proto_rawDesc
)

func file_config_config_proto_rawDescGZIP() []byte {
	file_config_config_proto_rawDescOnce.Do(func() {
		file_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_config_proto_rawDescData)
	})
	return file_config_config_proto_rawDescData
}

var file_config_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_config_config_proto_goTypes = []any{
	(AgentPool_AutoScaler_Mode)(0),                       // 0: velda.config.AgentPool.AutoScaler.Mode
	(*Server)(nil),                                       // 1: velda.config.Server
	(*Storage)(nil),                                      // 2: velda.config.Storage
	(*AgentPool)(nil),                                    // 3: velda.config.AgentPool
	(*AutoscalerBackendGCEInstanceGroup)(nil),            // 4: velda.config.AutoscalerBackendGCEInstanceGroup
	(*AutoscalerBackendAWSLaunchTemplate)(nil),           // 5: velda.config.AutoscalerBackendAWSLaunchTemplate
	(*AutoscalerBackendKubernetes)(nil),                  // 6: velda.config.AutoscalerBackendKubernetes
	(*AutoscalerBackendCommand)(nil),                     // 7: velda.config.AutoscalerBackendCommand
	(*Provisioner)(nil),                                  // 8: velda.config.Provisioner
	(*KubernetesProvisioner)(nil),                        // 9: velda.config.KubernetesProvisioner
	(*AWSProvisioner)(nil),                               // 10: velda.config.AWSProvisioner
	(*AWSAutoProvisioner)(nil),                           // 11: velda.config.AWSAutoProvisioner
	(*GCSProvisioner)(nil),                               // 12: velda.config.GCSProvisioner
	(*AutoscalerBackend)(nil),                            // 13: velda.config.AutoscalerBackend
	(*Config)(nil),                                       // 14: velda.config.Config
	(*Storage_Zfs)(nil),                                  // 15: velda.config.Storage.Zfs
	(*Storage_MiniVelda)(nil),                            // 16: velda.config.Storage.MiniVelda
	(*AgentPool_AutoScaler)(nil),                         // 17: velda.config.AgentPool.AutoScaler
	nil,                                                  // 18: velda.config.AutoscalerBackendAWSLaunchTemplate.TagsEntry
	(*KubernetesProvisioner_GoogleKubernetesEngine)(nil), // 19: velda.config.KubernetesProvisioner.GoogleKubernetesEngine
	(*agent.AgentConfig)(nil),                            // 20: velda.agent.AgentConfig
	(*durationpb.Duration)(nil),                          // 21: google.protobuf.Duration
	(*agent.BrokerInfo)(nil),                             // 22: velda.agent.BrokerInfo
}
var file_config_config_proto_depIdxs = []int32{
	15, // 0: velda.config.Storage.zfs:type_name -> velda.config.Storage.Zfs
	16, // 1: velda.config.Storage.mini:type_name -> velda.config.Storage.MiniVelda
	17, // 2: velda.config.AgentPool.auto_scaler:type_name -> velda.config.AgentPool.AutoScaler
	20, // 3: velda.config.AutoscalerBackendAWSLaunchTemplate.agent_config:type_name -> velda.agent.AgentConfig
	18, // 4: velda.config.AutoscalerBackendAWSLaunchTemplate.tags:type_name -> velda.config.AutoscalerBackendAWSLaunchTemplate.TagsEntry
	21, // 5: velda.config.AutoscalerBackendAWSLaunchTemplate.max_instance_lifetime:type_name -> google.protobuf.Duration
	10, // 6: velda.config.Provisioner.aws:type_name -> velda.config.AWSProvisioner
	9,  // 7: velda.config.Provisioner.kubernetes:type_name -> velda.config.KubernetesProvisioner
	12, // 8: velda.config.Provisioner.gcs:type_name -> velda.config.GCSProvisioner
	11, // 9: velda.config.Provisioner.aws_auto:type_name -> velda.config.AWSAutoProvisioner
	19, // 10: velda.config.KubernetesProvisioner.gke:type_name -> velda.config.KubernetesProvisioner.GoogleKubernetesEngine
	21, // 11: velda.config.AWSProvisioner.update_interval:type_name -> google.protobuf.Duration
	5,  // 12: velda.config.AWSAutoProvisioner.template:type_name -> velda.config.AutoscalerBackendAWSLaunchTemplate
	17, // 13: velda.config.AWSAutoProvisioner.autoscaler_config:type_name -> velda.config.AgentPool.AutoScaler
	21, // 14: velda.config.GCSProvisioner.update_interval:type_name -> google.protobuf.Duration
	4,  // 15: velda.config.AutoscalerBackend.gce_instance_group:type_name -> velda.config.AutoscalerBackendGCEInstanceGroup
	5,  // 16: velda.config.AutoscalerBackend.aws_launch_template:type_name -> velda.config.AutoscalerBackendAWSLaunchTemplate
	6,  // 17: velda.config.AutoscalerBackend.kubernetes:type_name -> velda.config.AutoscalerBackendKubernetes
	7,  // 18: velda.config.AutoscalerBackend.command:type_name -> velda.config.AutoscalerBackendCommand
	1,  // 19: velda.config.Config.server:type_name -> velda.config.Server
	2,  // 20: velda.config.Config.storage:type_name -> velda.config.Storage
	3,  // 21: velda.config.Config.agent_pools:type_name -> velda.config.AgentPool
	8,  // 22: velda.config.Config.provisioners:type_name -> velda.config.Provisioner
	22, // 23: velda.config.Config.default_broker_info:type_name -> velda.agent.BrokerInfo
	13, // 24: velda.config.AgentPool.AutoScaler.backend:type_name -> velda.config.AutoscalerBackend
	21, // 25: velda.config.AgentPool.AutoScaler.idle_decay:type_name -> google.protobuf.Duration
	21, // 26: velda.config.AgentPool.AutoScaler.initial_delay:type_name -> google.protobuf.Duration
	21, // 27: velda.config.AgentPool.AutoScaler.sync_loop_interval:type_name -> google.protobuf.Duration
	21, // 28: velda.config.AgentPool.AutoScaler.kill_unknown_after:type_name -> google.protobuf.Duration
	0,  // 29: velda.config.AgentPool.AutoScaler.mode:type_name -> velda.config.AgentPool.AutoScaler.Mode
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_config_config_proto_init() }
func file_config_config_proto_init() {
	if File_config_config_proto != nil {
		return
	}
	file_config_config_proto_msgTypes[1].OneofWrappers = []any{
		(*Storage_Zfs_)(nil),
		(*Storage_Mini)(nil),
	}
	file_config_config_proto_msgTypes[7].OneofWrappers = []any{
		(*Provisioner_Aws)(nil),
		(*Provisioner_Kubernetes)(nil),
		(*Provisioner_Gcs)(nil),
		(*Provisioner_AwsAuto)(nil),
	}
	file_config_config_proto_msgTypes[8].OneofWrappers = []any{
		(*KubernetesProvisioner_Gke)(nil),
	}
	file_config_config_proto_msgTypes[12].OneofWrappers = []any{
		(*AutoscalerBackend_GceInstanceGroup)(nil),
		(*AutoscalerBackend_AwsLaunchTemplate)(nil),
		(*AutoscalerBackend_Kubernetes)(nil),
		(*AutoscalerBackend_Command)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_config_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_config_proto_goTypes,
		DependencyIndexes: file_config_config_proto_depIdxs,
		EnumInfos:         file_config_config_proto_enumTypes,
		MessageInfos:      file_config_config_proto_msgTypes,
	}.Build()
	File_config_config_proto = out.File
	file_config_config_proto_rawDesc = nil
	file_config_config_proto_goTypes = nil
	file_config_config_proto_depIdxs = nil
}
