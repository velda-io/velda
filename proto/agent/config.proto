// Copyright 2025 Velda Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package velda.agent;

import "google/protobuf/duration.proto";

option go_package = "velda.io/velda/pkg/proto/agent";

message HostMount {
  string source = 1;   // The source path on the host.
  string target = 2;   // The target path in the container.
  bool read_write = 3; // Whether the mount is read-write.
}

message AgentDiskSource {
  message MountedDiskSource {
    string local_path = 1;
    reserved 2;
  }
  message NfsMountSource {
    // Server & location will be provided by the broker.
    string mount_options = 1; // Additional mount options.
  }
  oneof source {
    MountedDiskSource mounted_disk_source =
        1; // The disk source is pre-mounted on the host.
    NfsMountSource nfs_mount_source = 2; // The disk source is an NFS mount.
  };
}

message SandboxConfig {
  AgentDiskSource disk_source = 1;

  // List of allowed host mount sources by the session.
  // The sessions are only allowed to mount from these sources.
  repeated string allowed_host_mount_sources = 2;

  // List of host mounts to be applied in the sandbox.
  repeated HostMount host_mounts = 3;

  // The maximum time the session can run before it is terminated.
  google.protobuf.Duration max_time = 4;

  string host_local_mount_base_dir = 5;

  // Whether to allocate a TTY for the session.
  bool allocate_tty = 6;

  // The apparmor profile to run workload.
  string apparmor_profile = 7;

  // The directory where the NVIDIA driver is installed.
  // It must contain bin & lib for the user-space NVIDIA driver libraries.
  string nvidia_driver_install_dir = 8;
}

message DaemonConfig {
  // The path to the work directory for the agent daemon and all workspaces.
  string work_dir_path = 1;

  // The maximum number of sessions the agent can handle concurrently.
  // Default to 1.
  int32 max_sessions = 2;

  message Network {
    // Default is private_cidr_range at 172.80.0.0/24
    oneof agent_ip {
      string private_cidr_range = 1;
      bool detect_gcp_alias_ip_ranges = 2;
    }
    enum NetworkMode {
      NETWORK_MODE_UNSPECIFIED = 0;
      NETWORK_MODE_HOST = 1;
      NETWORK_MODE_BRIDGE = 2; // Use a bridge network
    }
    NetworkMode network_mode = 3;
    // Block 169.254.169.254 from the session, which is used by GCP/AWS
    // metadata server.
    bool block_metadata_server = 4;
  }

  // The network configuration for the agent.
  // If not set, all sessions will share the host network.
  // If set, each session will have its own network namespace.
  Network network = 3;
}

message AgentConfig {
  message Broker {
    // The URL of the broker.
    string address = 1;
    string public_address = 2;
  }
  Broker broker = 1;
  string session = 2;
  int64 instance = 3;

  SandboxConfig sandbox_config = 4;
  DaemonConfig daemon_config = 5;
  string pool = 6;

  string task_id = 7;
}
