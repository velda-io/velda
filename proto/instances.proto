// Copyright 2025 Velda Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";
package velda;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "velda.io/velda/pkg/proto";

message Instance {
  // Only to be filled by the server.
  int64 id = 1;
  string instance_name = 2;
}

message SnapshotReference {
  int64 instance_id = 1;
  string snapshot_name = 2;
}

message CreateInstanceRequest {
  Instance instance = 1;
  oneof source {
    string image_name = 2;
    SnapshotReference snapshot = 3;
  }
}

message GetInstanceRequest {
  int64 instance_id = 1;
}

message GetInstanceByNameRequest {
  string instance_name = 1;
}

message ListInstancesRequest {
  int32 page_size = 1;
  string page_token = 2;
}

message ListInstancesResponse {
  repeated Instance instances = 1;
  string next_page_token = 2;
}

message DeleteInstanceRequest {
  int64 instance_id = 1;
}

message CreateSnapshotRequest {
  int64 instance_id = 1;
  string snapshot_name = 2;
}

message DeleteSnapshotRequest {
  int64 instance_id = 1;
  string snapshot_name = 2;
}

message ListImagesRequest {
  string prefix = 1;
}

message ListImagesResponse {
  repeated string images = 1;
}

message CreateImageRequest {
  string image_name = 1;
  int64 instance_id = 2;
  string snapshot_name = 3;
}

message DeleteImageRequest {
  string image_name = 1;
}

service InstanceService {
  rpc CreateInstance(CreateInstanceRequest) returns (Instance) {
    option (google.api.http) = {
      put: "/rest/instances"
    };
  }

  rpc GetInstance(GetInstanceRequest) returns (Instance) {
    option (google.api.http) = {
      get: "/rest/instances/{instance_id}"
    };
  }

  rpc GetInstanceByName(GetInstanceByNameRequest) returns (Instance) {
    option (google.api.http) = {
      get: "/rest/instances/by_name/{instance_name}"
    };
  }

  rpc DeleteInstance(DeleteInstanceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/rest/instances/{instance_id}"
    };
  }

  rpc ListInstances(ListInstancesRequest) returns (ListInstancesResponse) {
    option (google.api.http) = {
      get: "/rest/instances"
    };
  }

  rpc CreateSnapshot(CreateSnapshotRequest)
      returns (SnapshotReference) {
    option (google.api.http) = {
      put: "/rest/instances/{instance_id}/snapshot/{snapshot_name}"
      body: "*"
    };
  }

  rpc DeleteSnapshot(DeleteSnapshotRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/rest/instances/{instance_id}/snapshot/{snapshot_name}"
    };
  }

  rpc ListImages(ListImagesRequest) returns (ListImagesResponse) {
    option (google.api.http) = {
      get: "/rest/images"
    };
  }

  rpc CreateImage(CreateImageRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/rest/images"
      body: "*"
    };
  }

  rpc DeleteImage(DeleteImageRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/rest/images/{image_name}"
    };
  }
}
